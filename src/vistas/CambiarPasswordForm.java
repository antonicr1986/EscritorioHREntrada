package vistas;

import CRUD.Update;
import java.io.BufferedWriter;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author Antonio Company Rodriguez
 * 
 * Clase para crear ventanas para cambio de contraseña del usuario logueado
 */
public class CambiarPasswordForm extends javax.swing.JFrame {

    private String codigoUserRecibido;
    private JComboBox jComboBoxTipoOperacion;
    private FormVentanasUsuario ventana;
    private String directorioActual = System.getProperty("user.dir");
    private String rutaImagen = directorioActual + "/img/HREntradaIcono.jpg";
    private String user;
    private String []insertEmpresas;
    private BufferedWriter escriptor;
    private ObjectInputStream perEnt;
    private Socket socket;
    private JTextArea jTextAreaUpdate;
    
    private boolean cambioPass = true;
    private boolean insert = true;
    private boolean  select = false;
    private boolean update = false;
    private boolean delete = false;
    
    
    /**
     * Creates new form CambiarPasswordForm
     * Añadiremos características iniciales como la posición centrada, el título y el icono personalizados
     * 
     * @param jComboBoxTipoOperacion desplegable de la ventana con el tipo de operacion CRUD a realizar
     * @param ventana Ventana del tipo FormVentanasUsuario que tendremos abierta mientras creamos la nueva ventana
     * @param user És un string con el nombre del usuario que haya iniciado sesión que pasaremos
     * por parámetro al crear un tipo de ventanas de este
     * @param insertEmpresas array de String que contiene todos los valores para el update
     * @param escriptor BufferedWriter de contacto con el server
     * @param perEnt tipo de objeto ObjectInputStream recibido
     * @param socket Objeto tipo Socket para la conexión
     * @param jTextAreaUpdate textArea en el que mostraremos los datos al usuario por la aplicación gráfica
     */
    
    public CambiarPasswordForm( JComboBox jComboBoxTipoOperacion, FormVentanasUsuario ventana, String user, String insertEmpresas[], BufferedWriter escriptor, ObjectInputStream perEnt, Socket socket, JTextArea jTextAreaUpdate) {
        this.jComboBoxTipoOperacion=jComboBoxTipoOperacion;
        this.ventana=ventana;
        this.user=user;
        this.insertEmpresas=insertEmpresas;
        this.escriptor=escriptor;
        this.perEnt = perEnt;
        this.socket = socket;
        this.jTextAreaUpdate=jTextAreaUpdate;
        
        setLocationRelativeTo(null);
        setTitle("Cambiar contraseña usuario: "+user);
        initComponents();
        
        jButtonConfirmarNuevaContraseña.setEnabled(false);
        jCheckBoxVerContraseñas.setEnabled(false);
        
        //Añadir icono
        ImageIcon icono = new ImageIcon(rutaImagen);
        setIconImage(icono.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonConfirmarNuevaContraseña = new javax.swing.JButton();
        jLabelContraseña = new javax.swing.JLabel();
        jLabelRepetirContraseña = new javax.swing.JLabel();
        jCheckBoxVerContraseñas = new javax.swing.JCheckBox();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPasswordField2 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonConfirmarNuevaContraseña.setText("Confirmar nueva contraseña");
        jButtonConfirmarNuevaContraseña.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarNuevaContraseñaActionPerformed(evt);
            }
        });

        jLabelContraseña.setText("Contraseña:");

        jLabelRepetirContraseña.setText("Repetir contraseña:");

        jCheckBoxVerContraseñas.setText("Ver contraseñas");
        jCheckBoxVerContraseñas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxVerContraseñasActionPerformed(evt);
            }
        });

        jPasswordField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordField1KeyReleased(evt);
            }
        });

        jPasswordField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordField2KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBoxVerContraseñas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(jButtonConfirmarNuevaContraseña)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelContraseña)
                            .addComponent(jLabelRepetirContraseña))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(jPasswordField2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelContraseña)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRepetirContraseña)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConfirmarNuevaContraseña)
                    .addComponent(jCheckBoxVerContraseñas))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Acción ejecutada al clicar en el botón confirmar nueva contraseña, que comprueba
    * que las dos contraseñas escritas en los jPasswordFields sean iguales y muestra
    * un JOptionPane informando si lo són o no lo són.
    *
    * @param evt Evento de acción generado al interactuar con el boton
    * 
    */
    
    private void jButtonConfirmarNuevaContraseñaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarNuevaContraseñaActionPerformed

        char[] password1 = jPasswordField1.getPassword();
        char[] password2 = jPasswordField2.getPassword();
        
        // Convierte los caracteres a cadenas
        String passwordString1 = new String(password1);
        String passwordString2 = new String(password2);
                
       // Compara las cadenas
        if (passwordString1.equals(passwordString2)) { 
            ventana.setCambioPass(true);   
            ventana.setSelect(false);
            ventana.setInsert(false);
            ventana.setUpdate(false);
            ventana.setDelete(false);
            ventana.setPasswordCambioPass (jPasswordField1.getText());              
            ventana.ejecutarAccion();            
            this.dispose();
            
        } else {
            JOptionPane.showMessageDialog(null, "Las contraseñas no son iguales.");
        }       
    }//GEN-LAST:event_jButtonConfirmarNuevaContraseñaActionPerformed

    /**
    * Método que lo que hace es si el checkBox determinado esta seleccionado dejaremos ver
    * los carácteres de jPasswordField1 y jPasswordField2, en cambio sino esta seleccionado
    * lo que haremos será poner todos los carácteres de su contenido como '*'
    *
    * @param evt Evento de acción generado al interactuar con el JCheckBox
    */
    
    private void jCheckBoxVerContraseñasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxVerContraseñasActionPerformed
 
        if (jCheckBoxVerContraseñas.isSelected()) {
            jPasswordField1.setEchoChar((char) 0);
            jPasswordField2.setEchoChar((char) 0);
        } else {
            jPasswordField1.setEchoChar('*');
            jPasswordField2.setEchoChar('*');
        }
    }//GEN-LAST:event_jCheckBoxVerContraseñasActionPerformed

    /**
    * Habilitaremos o no el boton de confirmar contraseña y el checkbox según
    * las condiciones de los métodos internos.
    *
    * @param evt Evento de acción generado al teclear algo en la Contraseña
    */
    
    private void jPasswordField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordField1KeyReleased
      
        habilitarDeshabilitarBotonConfirmarContraseña();
        habilitarDeshabilitarCheckBoxVerContraseñas();
    }//GEN-LAST:event_jPasswordField1KeyReleased

    /**
    * Habilitaremos o no el boton de confirmar contraseña y el checkbox según
    * las condiciones de los métodos internos.
    *
    * @param evt Evento de acción generado al teclear algo en la Contraseña2
    */
    
    private void jPasswordField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordField2KeyReleased
       
        habilitarDeshabilitarBotonConfirmarContraseña();
        habilitarDeshabilitarCheckBoxVerContraseñas();
    }//GEN-LAST:event_jPasswordField2KeyReleased

    /**
    * Habilita o deshabilita el botón de confirmar cambio de contraseña
    * dependiendo de si alguna de las contraseñas introducida esta vacía.
    *
    */
    
    public void habilitarDeshabilitarBotonConfirmarContraseña(){
        if ((jPasswordField1.getText().equals(""))||(jPasswordField2.getText().equals(""))){
            jButtonConfirmarNuevaContraseña.setEnabled(false);
        }else{
            jButtonConfirmarNuevaContraseña.setEnabled(true);
        }
    }
    
    /**
    * Habilita o deshabilita el checkBox para ver contraseñas dependiendo de si alguna de las 
    * contraseñas introducida no esta vacía.
    *
    */
    
    public void habilitarDeshabilitarCheckBoxVerContraseñas(){
        if ((!jPasswordField1.getText().equals(""))||(!jPasswordField2.getText().equals(""))){
            jCheckBoxVerContraseñas.setEnabled(true);
        }
        else{
             jCheckBoxVerContraseñas.setEnabled(false);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConfirmarNuevaContraseña;
    private javax.swing.JCheckBox jCheckBoxVerContraseñas;
    private javax.swing.JLabel jLabelContraseña;
    private javax.swing.JLabel jLabelRepetirContraseña;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    // End of variables declaration//GEN-END:variables
}
