package vistas;

import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStreamWriter;
import java.io.StreamCorruptedException;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import paneles.PanelOtros;

import modelo.*;

/**
 *
 * @author Antonio Company Rodriguez
 */
public class FormUsuario extends javax.swing.JFrame {
    
    Socket socket;
    
    String palabra ="";
    BufferedReader lector;
    BufferedWriter escriptor;
    ObjectInputStream perEnt;
    String codigoUserRecibido;
    
    String codigo;
    String crud;
    String nombreTabla;
    String columna;
    String orden;

    public String getPalabra() {
        return palabra;
    }

    public void setPalabra(String palabra) {
        this.palabra = palabra;
    }
    
    public JLabel getjLabel1() {
        return jLabelUserCode;
    }

    public void setjLabel1(String nuevoTexto) {
        jLabelUserCode.setText(nuevoTexto);
    }
    
    /**
     * Creates new form FormUsuario
     */
    public FormUsuario() {
        setMinimumSize(new Dimension(450, 400));
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        initComponents();
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                logout();
                
            }
        });   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonLogoutSession = new javax.swing.JButton();
        jLabelUserCode = new javax.swing.JLabel();
        jComboBoxTablas = new javax.swing.JComboBox<>();
        jLabelTablas = new javax.swing.JLabel();
        jLabelPalabra = new javax.swing.JLabel();
        jTextFieldPalabra = new javax.swing.JTextField();
        jLabelColumna = new javax.swing.JLabel();
        jTextFieldColumna = new javax.swing.JTextField();
        jTextFieldOrden = new javax.swing.JTextField();
        jLabelOrden = new javax.swing.JLabel();
        jLabelResultadoBusqueda = new javax.swing.JLabel();
        jButtonBuscar = new javax.swing.JButton();
        jLabelCodigo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxTipoOperacion = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setMaximumSize(new java.awt.Dimension(800, 800));
        jPanel1.setMinimumSize(new java.awt.Dimension(498, 335));

        jButtonLogoutSession.setText("Logout Session");
        jButtonLogoutSession.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutSessionActionPerformed(evt);
            }
        });

        jLabelUserCode.setText("jLabelUserCode");

        jComboBoxTablas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "empleados", "users", "empresa", "jornada" }));

        jLabelTablas.setText("Tabla:");

        jLabelPalabra.setText("Palabra:");

        jTextFieldPalabra.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPalabra.setText("0");

        jLabelColumna.setText("Columna:");

        jTextFieldColumna.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldColumna.setText("0");

        jTextFieldOrden.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldOrden.setText("0");

        jLabelOrden.setText("Orden:");

        jLabelResultadoBusqueda.setText("RESULTADO BÚSQUEDA");

        jButtonBuscar.setText("BUSCAR");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jLabelCodigo.setText("Codigo:");

        jLabel1.setText("Tipo operacion:");

        jComboBoxTipoOperacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select" }));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelCodigo)
                        .addGap(22, 22, 22)
                        .addComponent(jLabelUserCode)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonLogoutSession)
                                .addContainerGap(636, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelResultadoBusqueda))
                                .addGap(0, 27, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelPalabra)
                                    .addComponent(jLabelTablas))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelColumna)
                                    .addComponent(jLabelOrden))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldOrden)
                                    .addComponent(jTextFieldColumna, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxTipoOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUserCode)
                    .addComponent(jLabelCodigo)
                    .addComponent(jLabelResultadoBusqueda))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jComboBoxTipoOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTablas))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPalabra)
                            .addComponent(jTextFieldPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldColumna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelColumna))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelOrden)
                            .addComponent(jTextFieldOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 232, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLogoutSession))
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLogoutSessionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutSessionActionPerformed
        //Enviamos datos al servidor para que sepas que hemos cerrado sesion
         logout();
    }//GEN-LAST:event_jButtonLogoutSessionActionPerformed

    private void logout(){
        try {
            //IMPLEMENTA
            Socket socket = MainForm.socket;

            if (socket != null && socket.isConnected()) {
                // Obtener flujos de entrada y salida.
                lector = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                escriptor = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                // Aquí enviamos la señal de "logout" al servidor.
                String logoutSignal = "exit";
                escriptor.write(logoutSignal);
                escriptor.newLine();
                escriptor.flush();

                // Resto de la lógica de cierre de sesión.
                lector.close();
                escriptor.close();
                socket.close();

                palabra = "exit";

                this.dispose();

                MainForm mainForm = new MainForm();
                mainForm.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                mainForm.setLocation(mainForm.getX(),mainForm.getY()); 
                mainForm.setVisible(true);     
                mainForm.setPalabra(palabra);

                //JOptionPane.showMessageDialog(null,"Palabra: "+ palabra+"\nPalabra: "+mainForm.getPalabra());     
            }
            else{
                 JOptionPane.showMessageDialog(null,"Problemas con la conexión al socket.");     
            }
         } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        try {
            // TODO add your handling code here:
            socket = MainForm.socket;
            
            lector = new BufferedReader(new InputStreamReader(socket.getInputStream()));//flujo lectura del server
            escriptor = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));//flujo envio al server
            
            
            codigo = jLabelUserCode.getText(); //el codigo recibido tiene que ser el mismo que le hemos asignado
            crud = jComboBoxTipoOperacion.getSelectedItem().toString(); //Tipo de operacion
            nombreTabla = jComboBoxTablas.getSelectedItem().toString(); //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            columna = jTextFieldColumna.getText(); //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String palabraAbuscar = jTextFieldPalabra.getText();// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            orden = jTextFieldOrden.getText();// si es el caso el orden, si no hay ponemos 0
            
            jTextArea1.setText("");
            
            //Canviamos los valores de los combo box a los numericos correspondientes          
            switch (crud){
                case "select":
                    crud = "0";
                    break;
                case "insert":
                    crud = "1";
                    break;
                case "update":
                    crud = "2";
                    break;
                case "delete":
                    crud = "3";
                    break;
            }
            
            switch (nombreTabla){
                case "empleados":
                    nombreTabla = "0";
                    break;
                case "users":
                    nombreTabla = "1";
                    break;
                case "empresa":
                    nombreTabla = "2";
                    break;
                case "jornada":
                    nombreTabla = "3";
                    break;
            }         
            
            palabra = codigo + "," + crud + "," + nombreTabla + "," + columna + "," + palabraAbuscar + "," + orden;
            //JOptionPane.showMessageDialog(null,"Frase enviada al server: "+palabra); 
             
            
            // y ahora comprobamos que la frase este correcta si no enviamos una establecida (menos el codigo que sera error, es por si fallan las otras palabras)

            String[] frase = new String[6];
            frase = palabra.split(",");

            String[] NomApellido = new String[8];
            NomApellido = palabra.split(",");

            String[] insertEmpresas = new String[10];
            insertEmpresas = palabra.split(",");

            String[] insertUsuarios = new String[12];
            insertUsuarios = palabra.split(",");

            String[] insertEmpleadoMailTelf = new String[16];
            insertEmpleadoMailTelf = palabra.split(",");

            String[] insertEmpleadoMT = new String[18];
            insertEmpleadoMT = palabra.split(",");

            String[] insertEmpleado = new String[20];
            insertEmpleado = palabra.split(",");

            if (!codigo.equals(frase[0]) || !codigo.equals(NomApellido[0])
                    || !codigo.equals(insertEmpresas[0]) || !codigo.equals(insertUsuarios[0])
                    || !codigo.equals(insertEmpleadoMailTelf[0]) || !codigo.equals(insertEmpleadoMT[0])
                    || !codigo.equals(insertEmpleado[0])) {

                System.out.println("El codigo es erroneo");

            } else if (frase[5].equals("0") || frase[5].equals("1")) {
                codigoUserRecibido = frase[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
                crud = frase[1];
                nombreTabla = frase[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
                columna = frase[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
                palabraAbuscar = frase[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
                orden = frase[5];// si es el caso el orden, si no hay ponemos 0

                jTextArea1.append("____________________________________________________________________"+ "\n"
                    +"codigoUserRecibido: " + codigoUserRecibido + "\n"
                    +"crud: " + crud+ "\n"
                    +"nombreTabla: " + nombreTabla+ "\n"
                    +"columna: " + columna+ "\n"
                    +"palabraAbuscar: " + palabraAbuscar+ "\n"
                    +"orden: " + orden + "\n"
                    +"____________________________________________________________________" + "\n");

                palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + columna + "," + palabraAbuscar + "," + orden;

                if (codigoUserRecibido.equals("")) {
                    codigoUserRecibido = "0";
                }

                if (crud.equals("0")) {/*SELECT*/  
                    operacionesConSelect( columna, palabra, palabraAbuscar);
                }

            } else if (NomApellido[7].equals("0") || NomApellido[7].equals("1")) { //NomApellido7
                operacionesConApellidos7( NomApellido);
                
            } else if (insertEmpresas[9].equals("0") || insertEmpresas[9].equals("1")) {
                operacionesConInsertEmpresas( insertEmpresas);
                
            } else if (insertUsuarios[11].equals("0") || insertUsuarios[11].equals("1")) {
                operacionesConInsertUsuarios( insertUsuarios);
                
            } else if (insertEmpleadoMailTelf[15].equals("0") || insertEmpleadoMailTelf[15].equals("1")) {
                operacionesConInsertEmpleadoMailTelf( insertEmpleadoMailTelf);
                
            }else if (insertEmpleadoMT[17].equals("0") || insertEmpleadoMT[17].equals("1") ) {
                operacionsConInsertEmpleadoMT17y15(insertEmpleadoMT);
            } else if (insertEmpleado[19].equals("0") || insertEmpleado[19].equals("1")) {
                operacionesConInsertEmpleado19(insertEmpleado);             
            }
        }  catch (UnknownHostException ex) {
            Logger.getLogger(FormUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }catch (IOException ex) {
            Logger.getLogger(FormUsuario.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }catch(Exception ex){
            Logger.getLogger(FormUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
    public void operacionesConSelect ( String columna, String palabra, String palabraAbuscar) throws IOException, ClassNotFoundException{
         if (nombreTabla.equals("0") && columna.equals("dni")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empleados> listaPersonasdni = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaPersonasdni = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaPersonasdni.size(); i++) {
                    if (columna.equals("dni") && palabraAbuscar.equals(listaPersonasdni.get(i).getDni())) {
                        jTextArea1.append("Dni: " + listaPersonasdni.get(i).getDni() + "\n"
                                + "Nombre: " + listaPersonasdni.get(i).getNom() + "\n"
                                + "Apellido: " + listaPersonasdni.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaPersonasdni.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaPersonasdni.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaPersonasdni.get(i).getCodicard() + "\n"
                                + "Mail: " + listaPersonasdni.get(i).getMail() + "\n"
                                + "Teléfono: " + listaPersonasdni.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("0") && columna.equals("nomempresa")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empleados> listaTotalEmpleadosNomEmpresa = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalEmpleadosNomEmpresa = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalEmpleadosNomEmpresa.size(); i++) {
                    if (columna.equals("nomempresa") && palabraAbuscar.equals(listaTotalEmpleadosNomEmpresa.get(i).getNomempresa())) {
                        jTextArea1.append("Dni: " + listaTotalEmpleadosNomEmpresa.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalEmpleadosNomEmpresa.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalEmpleadosNomEmpresa.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaTotalEmpleadosNomEmpresa.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaTotalEmpleadosNomEmpresa.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaTotalEmpleadosNomEmpresa.get(i).getCodicard() + "\n"
                                + "Mail: " + listaTotalEmpleadosNomEmpresa.get(i).getMail() + "\n"
                                + "Teléfono: " + listaTotalEmpleadosNomEmpresa.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("0") && columna.equals("departament")) {

                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                System.out.println("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empleados> listaTotalEmpleadosDepart = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalEmpleadosDepart = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalEmpleadosDepart.size(); i++) {
                    if (columna.equals("departament") && palabraAbuscar.equals(listaTotalEmpleadosDepart.get(i).getDepartament())) {
                        jTextArea1.append("Dni: " + listaTotalEmpleadosDepart.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalEmpleadosDepart.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalEmpleadosDepart.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaTotalEmpleadosDepart.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaTotalEmpleadosDepart.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaTotalEmpleadosDepart.get(i).getCodicard() + "\n"
                                + "Mail: " + listaTotalEmpleadosDepart.get(i).getMail() + "\n"
                                + "Teléfono: " + listaTotalEmpleadosDepart.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("0") && columna.equals("codicard")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empleados> listaTotalEmpleadosCodiCard = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalEmpleadosCodiCard = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalEmpleadosCodiCard.size(); i++) {
                    String codicard = String.valueOf(listaTotalEmpleadosCodiCard.get(i).getCodicard());
                    if (columna.equals("codicard") && palabraAbuscar.equals(codicard)) {
                        jTextArea1.append("Dni: " + listaTotalEmpleadosCodiCard.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalEmpleadosCodiCard.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalEmpleadosCodiCard.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaTotalEmpleadosCodiCard.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaTotalEmpleadosCodiCard.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaTotalEmpleadosCodiCard.get(i).getCodicard() + "\n"
                                + "Mail: " + listaTotalEmpleadosCodiCard.get(i).getMail() + "\n"
                                + "Teléfono: " + listaTotalEmpleadosCodiCard.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("0") && columna.equals("mail")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empleados> listaTotalEmpleadosMail = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalEmpleadosMail = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalEmpleadosMail.size(); i++) {
                    if (columna.equals("mail") && palabraAbuscar.equals(listaTotalEmpleadosMail.get(i).getMail())) {
                        jTextArea1.append("Dni: " + listaTotalEmpleadosMail.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalEmpleadosMail.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalEmpleadosMail.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaTotalEmpleadosMail.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaTotalEmpleadosMail.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaTotalEmpleadosMail.get(i).getCodicard() + "\n"
                                + "Mail: " + listaTotalEmpleadosMail.get(i).getMail() + "\n"
                                + "Teléfono: " + listaTotalEmpleadosMail.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("0") && columna.equals("telephon")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                       + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empleados> listaTotalEmpleadosTelf = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalEmpleadosTelf = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalEmpleadosTelf.size(); i++) {
                    String telephon = String.valueOf(listaTotalEmpleadosTelf.get(i).getTelephon());
                    if (columna.equals("telephon") && palabraAbuscar.equals(telephon)) {
                        jTextArea1.append("Dni: " + listaTotalEmpleadosTelf.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalEmpleadosTelf.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalEmpleadosTelf.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaTotalEmpleadosTelf.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaTotalEmpleadosTelf.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaTotalEmpleadosTelf.get(i).getCodicard() + "\n"
                                + "Mail: " + listaTotalEmpleadosTelf.get(i).getMail() + "\n"
                                + "Teléfono: " + listaTotalEmpleadosTelf.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();

            } else if (nombreTabla.equals("1") && columna.equals("dni")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Users> listaToUsersDni = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaToUsersDni = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaToUsersDni.size(); i++) {
                    if (columna.equals("dni") && palabraAbuscar.equals(listaToUsersDni.get(i).getDni())) {
                        jTextArea1.append("Login: " + listaToUsersDni.get(i).getLogin() + "\n"
                                + "Password: " + listaToUsersDni.get(i).getPass() + "\n"
                                + "Tipo de user: " + listaToUsersDni.get(i).getNumtipe() + "\n"
                                + "DNI: " + listaToUsersDni.get(i).getDni()+ "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("1") && columna.equals("login")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Users> listaTotalUsersLogin = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalUsersLogin = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalUsersLogin.size(); i++) {
                    if (columna.equals("login") && palabraAbuscar.equals(listaTotalUsersLogin.get(i).getLogin())) {
                        jTextArea1.append("Login: " + listaTotalUsersLogin.get(i).getLogin() + "\n"
                                + "Password: " + listaTotalUsersLogin.get(i).getPass() + "\n"
                                + "Tipo de user: " + listaTotalUsersLogin.get(i).getNumtipe() + "\n"
                                + "DNI: " + listaTotalUsersLogin.get(i).getDni()+ "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("1") && columna.equals("numtipe")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Users> listaTotalUsersTipe = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalUsersTipe = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalUsersTipe.size(); i++) {
                    String numtipe = String.valueOf(listaTotalUsersTipe.get(i).getNumtipe());
                    if (columna.equals("numtipe") && palabraAbuscar.equals(numtipe)) {
                        jTextArea1.append("Login: " + listaTotalUsersTipe.get(i).getLogin() + "\n"
                                + "Password: " + listaTotalUsersTipe.get(i).getPass() + "\n"
                                + "Tipo de user: " + listaTotalUsersTipe.get(i).getNumtipe() + "\n"
                                + "DNI: " + listaTotalUsersTipe.get(i).getDni() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();

            } else if (nombreTabla.equals("2") && columna.equals("nom")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                       + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empresa> listaEmpresasNom = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaEmpresasNom = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaEmpresasNom.size(); i++) {
                    if (columna.equals("nom") && palabraAbuscar.equals(listaEmpresasNom.get(i).getNom())) {
                        jTextArea1.append("____________________________________________________________________" + "\n"
                            +"Nombre empresa: " + listaEmpresasNom.get(i).getNom() + "\n"
                            + "Dirección: " + listaEmpresasNom.get(i).getAddress() + "\n"
                            + "Teléfono: " + listaEmpresasNom.get(i).getTelephon() + "\n"
                            +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("2") && columna.equals("address")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empresa> listaEmpresasAddress = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaEmpresasAddress = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaEmpresasAddress.size(); i++) {
                    if (columna.equals("address") && palabraAbuscar.equals(listaEmpresasAddress.get(i).getAddress())) {
                        jTextArea1.append("____________________________________________________________________" + "\n"
                            +"Nombre empresa: " + listaEmpresasAddress.get(i).getNom() + "\n"
                            + "Dirección: " + listaEmpresasAddress.get(i).getAddress() + "\n"
                            + "Teléfono: " + listaEmpresasAddress.get(i).getTelephon() + "\n"
                            +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("2") && columna.equals("telephon")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empresa> listaEmpresasTelepho = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaEmpresasTelepho = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaEmpresasTelepho.size(); i++) {
                    String telephon = String.valueOf(listaEmpresasTelepho.get(i).getTelephon());
                    if (columna.equals("telephon") && palabraAbuscar.equals(telephon)) {
                        jTextArea1.append("____________________________________________________________________" + "\n"
                            +"Nombre empresa: " + listaEmpresasTelepho.get(i).getNom() + "\n"
                            + "Dirección: " + listaEmpresasTelepho.get(i).getAddress() + "\n"
                            + "Teléfono: " + listaEmpresasTelepho.get(i).getTelephon() + "\n"
                            +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();

            } else if (nombreTabla.equals("3") && columna.equals("dni")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Jornada> listaToJornadaDni = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaToJornadaDni = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaToJornadaDni.size(); i++) {
                    if (columna.equals("dni") && palabraAbuscar.equals(listaToJornadaDni.get(i).getDni())) {
                        jTextArea1.append("Dni: " + listaToJornadaDni.get(i).getDni() + "\n"
                                + "Nombre: " + listaToJornadaDni.get(i).getNom() + "\n"
                                + "Apellido: " + listaToJornadaDni.get(i).getApellido() + "\n"
                                + "Codigo tarjeta: " + listaToJornadaDni.get(i).getCodicard() + "\n"
                                + "Hora entrada: " + listaToJornadaDni.get(i).getHoraentrada() + "\n"
                                + "Hora salida: " + listaToJornadaDni.get(i).getHorasalida() + "\n"
                                + "Total: " + listaToJornadaDni.get(i).getTotal() + "\n"
                                + "Fecha: " + listaToJornadaDni.get(i).getFecha() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("3") && columna.equals("codicard")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Jornada> listaJornadaCodiCard = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaJornadaCodiCard = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaJornadaCodiCard.size(); i++) {
                    String codicard = String.valueOf(listaJornadaCodiCard.get(i).getCodicard());
                    if (columna.equals("codicard") && palabraAbuscar.equals(codicard)) {
                        jTextArea1.append("Dni: " + listaJornadaCodiCard.get(i).getDni() + "\n"
                                + "Nombre: " + listaJornadaCodiCard.get(i).getNom() + "\n"
                                + "Apellido: " + listaJornadaCodiCard.get(i).getApellido() + "\n"
                                + "Codigo tarjeta: " + listaJornadaCodiCard.get(i).getCodicard() + "\n"
                                + "Hora entrada: " + listaJornadaCodiCard.get(i).getHoraentrada() + "\n"
                                + "Hora salida: " + listaJornadaCodiCard.get(i).getHorasalida() + "\n"
                                + "Total: " + listaJornadaCodiCard.get(i).getTotal() + "\n"
                                + "Fecha: " + listaJornadaCodiCard.get(i).getFecha() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("3") && columna.equals("fecha")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Jornada> listaTotalJornadaFecha = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalJornadaFecha = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalJornadaFecha.size(); i++) {
                    if (columna.equals("fecha") && palabraAbuscar.equals(listaTotalJornadaFecha.get(i).getFecha())) {
                        jTextArea1.append("Dni: " + listaTotalJornadaFecha.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalJornadaFecha.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalJornadaFecha.get(i).getApellido() + "\n"
                                + "Codigo tarjeta: " + listaTotalJornadaFecha.get(i).getCodicard() + "\n"
                                + "Hora entrada: " + listaTotalJornadaFecha.get(i).getHoraentrada() + "\n"
                                + "Hora salida: " + listaTotalJornadaFecha.get(i).getHorasalida() + "\n"
                                + "Total: " + listaTotalJornadaFecha.get(i).getTotal() + "\n"
                                + "Fecha: " + listaTotalJornadaFecha.get(i).getFecha() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (!nombreTabla.equals(null) && columna.equals("0")) {
                mostrarTablasColumnaEquals0();
            }
        }
   
    public void mostrarTablasColumnaEquals0 () throws IOException, ClassNotFoundException{
        switch (nombreTabla) {
            case "0":
                //ahora si enviamos al server los datos que queremos, sin errores
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empleados> listaPersonas = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaPersonas = (ArrayList) perEnt.readObject();
                jTextArea1.append("____________________________________________________________________"+ "\n");
                //recibo objeto
                for (int i = 0; i < listaPersonas.size(); i++) {
                    jTextArea1.append("Dni: " + listaPersonas.get(i).getDni() + "\n"
                            + "Nombre: " + listaPersonas.get(i).getNom() + "\n"
                            + "Apellido: " + listaPersonas.get(i).getApellido() + "\n"
                            + "Nombre empresa: " + listaPersonas.get(i).getNomempresa() + "\n"
                            + "Departamento: " + listaPersonas.get(i).getDepartament() + "\n"
                            + "Codigo tarjeta: " + listaPersonas.get(i).getCodicard() + "\n"
                            + "Mail: " + listaPersonas.get(i).getMail() + "\n"
                            + "Telefono: " + listaPersonas.get(i).getTelephon() + "\n"
                            +"____________________________________________________________________" + "\n");
                }
                perEnt.getObjectInputFilter();
                break;
            case "1":

                //ahora si enviamos al server los datos que queremos, sin errores
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();

                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");
                List<Users> listaUsers = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaUsers = (ArrayList) perEnt.readObject();

                jTextArea1.append("____________________________________________________________________"+ "\n");
                //recibo objeto

                for (int i = 0; i < listaUsers.size(); i++) {
                    jTextArea1.append("Login: " + listaUsers.get(i).getLogin() + "\n"
                            + "Password: " + listaUsers.get(i).getPass() + "\n"
                            + "Tipo de user: " + listaUsers.get(i).getNumtipe() + "\n"
                            + "DNI: " + listaUsers.get(i).getDni() + "\n"
                            +"____________________________________________________________________" + "\n");
                }
                perEnt.getObjectInputFilter();
                break;

            case "2":

                //ahora si enviamos al server los datos que queremos, sin errores
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                       + "\nenvia los datos siguientes: "+ palabra + "\n");
                List<Empresa> listaEmpresa = new ArrayList<>();
                perEnt = new ObjectInputStream(socket.getInputStream());
                listaEmpresa = (ArrayList) perEnt.readObject();
                jTextArea1.append("____________________________________________________________________"+ "\n");
                //recibo objeto
                for (int i = 0; i < listaEmpresa.size(); i++) {
                    jTextArea1.append("Nombre empresa: " + listaEmpresa.get(i).getNom() + "\n"
                            + "Dirección: " + listaEmpresa.get(i).getAddress() + "\n"
                            + "Telefono: " + listaEmpresa.get(i).getTelephon() + "\n"
                            +"____________________________________________________________________" + "\n");
                }
                perEnt.getObjectInputFilter();
                break;
            case "3":

                //ahora si enviamos al server los datos que queremos, sin errores
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");
                List<Jornada> listaJorandas = new ArrayList<>();
                perEnt = new ObjectInputStream(socket.getInputStream());
                listaJorandas = (ArrayList) perEnt.readObject();

                jTextArea1.append("____________________________________________________________________"+ "\n");
                //recibo objeto
                for (int i = 0; i < listaJorandas.size(); i++) {
                    jTextArea1.append("Dni: " + listaJorandas.get(i).getDni() + "\n"
                            + "Nombre: " + listaJorandas.get(i).getNom() + "\n"
                            + "Apellido: " + listaJorandas.get(i).getApellido() + "\n"
                            + "Codigo tarjeta: " + listaJorandas.get(i).getCodicard() + "\n"
                            + "Hora entrada: " + listaJorandas.get(i).getHoraentrada() + "\n"
                            + "Hora salida: " + listaJorandas.get(i).getHorasalida() + "\n"
                            + "Total: " + listaJorandas.get(i).getTotal() + "\n"
                            + "Fecha: " + listaJorandas.get(i).getFecha() + "\n"
                            + "____________________________________________________________________");
                }
                perEnt.getObjectInputFilter();
                break;
            }
        }

    public void operacionesConApellidos7 ( String[] NomApellido)throws IOException, ClassNotFoundException{
            String codigoUserRecibido = NomApellido[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
            crud = NomApellido[1];
            nombreTabla = NomApellido[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            String nom = NomApellido[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoNom = NomApellido[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            String apellido = NomApellido[5]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoApellido = NomApellido[6];
            orden = NomApellido[7];// si es el caso el orden, si no hay ponemos 0

            jTextArea1.append("____________________________________________________________________" + "\n"
                +"codigoUserRecibido: " + codigoUserRecibido + "\n"
                +"crud: " + crud + "\n"
                +"nombreTabla: " + nombreTabla + "\n"
                +"nom: " + nom + "\n"
                +"datoNom: " + datoNom + "\n"
                +"apellido: " + apellido + "\n"
                +"datoApellido: " + datoApellido + "\n"
                +"orden: " + orden + "\n"
                +"____________________________________________________________________" + "\n");

            palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + nom + "," + datoNom + "," + apellido + "," + datoApellido + "," + orden;

            if (codigoUserRecibido.equals("")) {
                codigoUserRecibido = "0";
            }

            if (crud.equals("0")) {
                if (nombreTabla.equals("0") && nom.equals("nom") && apellido.equals("apellido")) {
                    escriptor.write(palabra);
                    escriptor.newLine();
                    escriptor.flush();
                    jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                            + "\nenvia los datos siguientes: "+ palabra + "\n");

                    List<Empleados> listaEmpleadosNomApellido = new ArrayList<>();

                    perEnt = new ObjectInputStream(socket.getInputStream());
                    listaEmpleadosNomApellido = (ArrayList) perEnt.readObject();

                    for (int i = 0; i < listaEmpleadosNomApellido.size(); i++) {
                        if (nom.equals("nom")
                                && datoNom.equals(listaEmpleadosNomApellido.get(i).getNom())
                                && apellido.equals("apellido")
                                && datoApellido.equals(listaEmpleadosNomApellido.get(i).getApellido())) {
                            jTextArea1.append("Dni: " + listaEmpleadosNomApellido.get(i).getDni() + "\n"
                                    + "Nombre: " + listaEmpleadosNomApellido.get(i).getNom() + "\n"
                                    + "Apellido: " + listaEmpleadosNomApellido.get(i).getApellido() + "\n"
                                    + "Nombre empresa: " + listaEmpleadosNomApellido.get(i).getNomempresa() + "\n"
                                    + "Departamento: " + listaEmpleadosNomApellido.get(i).getDepartament() + "\n"
                                    + "Codigo tarjeta: " + listaEmpleadosNomApellido.get(i).getCodicard() + "\n"
                                    + "Mail: " + listaEmpleadosNomApellido.get(i).getMail() + "\n"
                                    + "Telefono: " + listaEmpleadosNomApellido.get(i).getTelephon() + "\n"
                                    +"____________________________________________________________________" + "\n");
                        }
                    }
                    perEnt.getObjectInputFilter();
                } else if (nombreTabla.equals("3") && nom.equals("nom") && apellido.equals("apellido")) {
                    escriptor.write(palabra);
                    escriptor.newLine();
                    escriptor.flush();
                    jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                           + "\nenvia los datos siguientes: "+ palabra + "\n");

                    List<Jornada> listaJornadaNomApellido = new ArrayList<>();

                    perEnt = new ObjectInputStream(socket.getInputStream());
                    listaJornadaNomApellido = (ArrayList) perEnt.readObject();
                    for (int i = 0; i < listaJornadaNomApellido.size(); i++) {
                        if (nom.equals("nom")
                                && datoNom.equals(listaJornadaNomApellido.get(i).getNom())
                                && apellido.equals("apellido")
                                && datoApellido.equals(listaJornadaNomApellido.get(i).getApellido())) {
                            jTextArea1.append("Dni: " + listaJornadaNomApellido.get(i).getDni() + "\n"
                                    + "Nombre: " + listaJornadaNomApellido.get(i).getNom() + "\n"
                                    + "Apellido: " + listaJornadaNomApellido.get(i).getApellido() + "\n"
                                    + "Codigo tarjeta: " + listaJornadaNomApellido.get(i).getCodicard() + "\n"
                                    + "Hora entrada: " + listaJornadaNomApellido.get(i).getHoraentrada() + "\n"
                                    + "Hora salida: " + listaJornadaNomApellido.get(i).getHorasalida() + "\n"
                                    + "Total: " + listaJornadaNomApellido.get(i).getTotal() + "\n"
                                    + "Fecha: " + listaJornadaNomApellido.get(i).getFecha() + "\n"
                                    +"____________________________________________________________________");
                        }
                    }
                    perEnt.getObjectInputFilter();
                }
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    public void operacionesConInsertEmpresas( String []insertEmpresas)throws IOException, ClassNotFoundException{
        String codigoUserRecibido = insertEmpresas[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
        crud = insertEmpresas[1];
        nombreTabla = insertEmpresas[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
        String nom = insertEmpresas[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoNom = insertEmpresas[4];
        String address = insertEmpresas[5];
        String datoAddress = insertEmpresas[6];
        String telephon = insertEmpresas[7]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoTelephon = insertEmpresas[8];
        orden = insertEmpresas[9];// si es el caso el orden, si no hay ponemos 0

        jTextArea1.append("____________________________________________________________________" + "\n"
            +"codigoUserRecibido: " + codigoUserRecibido + "\n"
            +"crud: " + crud + "\n"
            +"nombreTabla: " + nombreTabla + "\n"
            +"nom: " + nom + "\n"
            +"datoNom: " + datoNom + "\n"
            +"address: " + address + "\n"
            +"datoApellido: " + datoAddress + "\n"
            +"telephon: " + telephon + "\n"
            +"datoTelephon: " + datoTelephon + "\n"
            +"orden: " + orden + "\n"
            +"____________________________________________________________________" + "\n");

        palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + nom + "," + datoNom + "," + address
                + "," + datoAddress + "," + telephon + "," + datoTelephon + "," + orden;

        if (codigoUserRecibido.equals("")) {
            codigoUserRecibido = "0";
        }

        if (crud.equals("1")) {
            if (nombreTabla.equals("2")) {

                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empresa> insertEmpresa = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                insertEmpresa = (ArrayList) perEnt.readObject();
                jTextArea1.append(("Empleado creado correctamente, sus datos son: \n"));
                jTextArea1.append("Nombre: " + datoNom + "\n"
                        + "Adrress: " + datoAddress + "\n"
                        + "Telefono: " + datoTelephon + "\n"
                        +"____________________________________________________________________");
                perEnt.getObjectInputFilter();
            }
        }
    }
    
    public void  operacionesConInsertUsuarios( String [] insertUsuarios)throws IOException, ClassNotFoundException{
        String codigoUserRecibido = insertUsuarios[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
                crud = insertUsuarios[1];
                nombreTabla = insertUsuarios[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
                String login = insertUsuarios[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
                String datoLogin = insertUsuarios[4];
                String pass = insertUsuarios[5];
                String datoPass = insertUsuarios[6];
                String numTipe = insertUsuarios[7]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
                String datoNumTipe = insertUsuarios[8];
                String dni = insertUsuarios[9]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
                String datoDni = insertUsuarios[10];
                orden = insertUsuarios[11];// si es el caso el orden, si no hay ponemos 0

                jTextArea1.append("____________________________________________________________________" + "\n"
                    +"codigoUserRecibido: " + codigoUserRecibido + "\n"
                    +"crud: " + crud + "\n"
                    +"nombreTabla: " + nombreTabla + "\n"
                    +"login: " + login + "\n"
                    +"datoLogin: " + datoLogin + "\n"
                    +"pass: " + pass + "\n"
                    +"datoPass: " + datoPass + "\n"
                    +"numTipe: " + numTipe + "\n"
                    +"datoNumTipe: " + datoNumTipe + "\n"
                    +"dni: " + dni + "\n"
                    +"datoDni: " + datoDni + "\n"
                    +"orden: " + orden + "\n"
                    +"____________________________________________________________________" + "\n");

                palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + login + "," + datoLogin + "," + pass
                        + "," + datoPass + "," + numTipe + "," + datoNumTipe + "," + dni + "," + datoDni + "," + orden;

                if (codigoUserRecibido.equals("")) {
                    codigoUserRecibido = "0";
                }

                if (crud.equals("1")) {
                    if (nombreTabla.equals("1")) {

                        escriptor.write(palabra);
                        escriptor.newLine();
                        escriptor.flush();
                        jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                                + "\nenvia los datos siguientes: "+ palabra + "\n");

                        List<Empresa> insertUser = new ArrayList<>();

                        perEnt = new ObjectInputStream(socket.getInputStream());
                        insertUser = (ArrayList) perEnt.readObject();
                        jTextArea1.append(("Empleado creado correctamente, sus datos son: \n"));
                        jTextArea1.append("Login: " + datoLogin + "\n"
                                + "Pass: " + datoPass + "\n"
                                + "Num Tipe: " + datoNumTipe + "\n"
                                + "Dni: " + datoDni + "\n"
                                +"____________________________________________________________________");
                        perEnt.getObjectInputFilter();
                    }
                }
    }
    
    public void operacionesConInsertEmpleadoMailTelf( String [] insertEmpleadoMailTelf)throws IOException, ClassNotFoundException{
        String codigoUserRecibido = insertEmpleadoMailTelf[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
        crud = insertEmpleadoMailTelf[1];
        nombreTabla = insertEmpleadoMailTelf[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
        String dni = insertEmpleadoMailTelf[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoDni = insertEmpleadoMailTelf[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
        String nom = insertEmpleadoMailTelf[5]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoNom = insertEmpleadoMailTelf[6];
        String apellido = insertEmpleadoMailTelf[7];// si es el caso el orden, si no hay ponemos 0
        String datoApellido = insertEmpleadoMailTelf[8]; //el codigo recibido tiene que ser el mismo que le hemos asignado
        String nomempresa = insertEmpleadoMailTelf[9];
        String datoNomempresa = insertEmpleadoMailTelf[10]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
        String departament = insertEmpleadoMailTelf[11]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoDepartament = insertEmpleadoMailTelf[12];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
        String codicard = insertEmpleadoMailTelf[13]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoCodicard = insertEmpleadoMailTelf[14];
        orden = insertEmpleadoMailTelf[15];// si es el caso el orden, si no hay ponemos 0

        jTextArea1.append("____________________________________________________________________"+ "\n" 
                +"codigoUserRecibido: " + codigoUserRecibido + "\n" 
                + "crud: " + crud + "\n" 
                +"nombreTabla: " + nombreTabla + "\n" 
                +"dni: " + dni + "\n" 
                + "datoDni: " + datoDni +  "\n" 
                +"nom: " + nom + "\n" 
                + "datoNom: " + datoNom + "\n" 
                + "apellido: " + apellido + "\n" 
                + "datoApellido: " + datoApellido + "\n" 
                + "nomempresa: " + nomempresa + "\n" 
                +"datoNomempresa: " + datoNomempresa + "\n" 
                + "departament: " + departament + "\n" 
                +"datoDepartament: " + datoDepartament + "\n" 
                + "codicard: " + codicard + "\n" 
                +"datoCodicar: " + datoCodicard + "\n" 
                + "orden: " + orden + "\n" 
                + "____________________________________________________________________" + "\n");

        palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + dni + "," + datoDni + "," + nom + "," + datoNom + "," + apellido
                + "," + datoApellido + "," + nomempresa + "," + datoNomempresa + "," + departament + "," + datoDepartament + "," + codicard + "," + datoCodicard
                + "," + orden;

        if (codigoUserRecibido.equals("")) {
            codigoUserRecibido = "0";
        }

        if (crud.equals("1")) {
            if (nombreTabla.equals("0")) {

                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empleados> insertEmpleadosMailTelf = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                insertEmpleadosMailTelf = (ArrayList) perEnt.readObject();
                jTextArea1.append(("Empleado creado correctamente, sus datos son: \n"));
                jTextArea1.append("Dni: " + datoDni + "\n"
                        + "Nombre: " + datoNom + "\n"
                        + "Apellido: " + datoApellido + "\n"
                        + "Nombre empresa: " + datoNomempresa + "\n"
                        + "Departamento: " + datoDepartament + "\n"
                        + "Codigo tarjeta: " + datoCodicard + "\n"
                        +"____________________________________________________________________");
                perEnt.getObjectInputFilter();
            }
        }
    }
    
    public void operacionsConInsertEmpleadoMT17y15(String []insertEmpleadoMT)throws IOException, ClassNotFoundException{
        if (insertEmpleadoMT[17].equals("0") && insertEmpleadoMT[15].equals("mail")
                    || insertEmpleadoMT[17].equals("1") && insertEmpleadoMT[15].equals("mail")) {

            String codigoUserRecibido = insertEmpleadoMT[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
            crud = insertEmpleadoMT[1];
            nombreTabla = insertEmpleadoMT[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            String dni = insertEmpleadoMT[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoDni = insertEmpleadoMT[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            String nom = insertEmpleadoMT[5]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoNom = insertEmpleadoMT[6];
            String apellido = insertEmpleadoMT[7];// si es el caso el orden, si no hay ponemos 0
            String datoApellido = insertEmpleadoMT[8]; //el codigo recibido tiene que ser el mismo que le hemos asignado
            String nomempresa = insertEmpleadoMT[9];
            String datoNomempresa = insertEmpleadoMT[10]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            String departament = insertEmpleadoMT[11]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoDepartament = insertEmpleadoMT[12];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            String codicard = insertEmpleadoMT[13]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoCodicard = insertEmpleadoMT[14];
            String mail = insertEmpleadoMT[15];// si es el caso el orden, si no hay ponemos 0
            String datoMail = insertEmpleadoMT[16];
            orden = insertEmpleadoMT[17];// si es el caso el orden, si no hay ponemos 0

            jTextArea1.append("____________________________________________________________________"+ "\n" 
                +"codigoUserRecibido: " + codigoUserRecibido + "\n" 
                + "crud: " + crud + "\n" 
                +"nombreTabla: " + nombreTabla + "\n" 
                +"dni: " + dni + "\n" 
                + "datoDni: " + datoDni +  "\n" 
                +"nom: " + nom + "\n" 
                + "datoNom: " + datoNom + "\n" 
                + "apellido: " + apellido + "\n" 
                + "datoApellido: " + datoApellido + "\n" 
                + "nomempresa: " + nomempresa + "\n" 
                +"datoNomempresa: " + datoNomempresa + "\n" 
                + "departament: " + departament + "\n" 
                +"datoDepartament: " + datoDepartament + "\n" 
                + "codicard: " + codicard + "\n" 
                +"datoCodicar: " + datoCodicard + "\n" 
                + "orden: " + orden + "\n" 
                + "____________________________________________________________________" + "\n");

            palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + dni + "," + datoDni + "," + nom + "," + datoNom + "," + apellido
                    + "," + datoApellido + "," + nomempresa + "," + datoNomempresa + "," + departament + "," + datoDepartament + "," + codicard + "," + datoCodicard
                    + "," + mail + "," + datoMail + "," + orden;

            if (codigoUserRecibido.equals("")) {
                codigoUserRecibido = "0";
            }

            if (crud.equals("1")) {
                if (nombreTabla.equals("0")) {

                    escriptor.write(palabra);
                    escriptor.newLine();
                    escriptor.flush();
                     jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                            + "\nenvia los datos siguientes: "+ palabra + "\n");

                    List<Empleados> insertEmpleadosMail = new ArrayList<>();

                    perEnt = new ObjectInputStream(socket.getInputStream());
                    insertEmpleadosMail = (ArrayList) perEnt.readObject();
                     jTextArea1.append(("Empleado creado correctamente, sus datos son: \n"));
                     jTextArea1.append("Dni: " + datoDni + "\n"
                            + "Nombre: " + datoNom + "\n"
                            + "Apellido: " + datoApellido + "\n"
                            + "Nombre empresa: " + datoNomempresa + "\n"
                            + "Departamento: " + datoDepartament + "\n"
                            + "Codigo tarjeta: " + datoCodicard + "\n"
                            + "Mail: " + datoMail + "\n"
                            +"____________________________________________________________________");
                    perEnt.getObjectInputFilter();
                }
            }
        } else if (insertEmpleadoMT[17].equals("0") && insertEmpleadoMT[15].equals("telephon")
                || insertEmpleadoMT[17].equals("1") && insertEmpleadoMT[15].equals("telephon")) {

            String codigoUserRecibido = insertEmpleadoMT[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
            crud = insertEmpleadoMT[1];
            nombreTabla = insertEmpleadoMT[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            String dni = insertEmpleadoMT[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoDni = insertEmpleadoMT[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            String nom = insertEmpleadoMT[5]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoNom = insertEmpleadoMT[6];
            String apellido = insertEmpleadoMT[7];// si es el caso el orden, si no hay ponemos 0
            String datoApellido = insertEmpleadoMT[8]; //el codigo recibido tiene que ser el mismo que le hemos asignado
            String nomempresa = insertEmpleadoMT[9];
            String datoNomempresa = insertEmpleadoMT[10]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            String departament = insertEmpleadoMT[11]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoDepartament = insertEmpleadoMT[12];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            String codicard = insertEmpleadoMT[13]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoCodicard = insertEmpleadoMT[14];
            String telephon = insertEmpleadoMT[15];// si es el caso el orden, si no hay ponemos 0
            String datoTelephon = insertEmpleadoMT[16];
            orden = insertEmpleadoMT[17];// si es el caso el orden, si no hay ponemos 0

            jTextArea1.append("____________________________________________________________________"+ "\n" 
                +"codigoUserRecibido: " + codigoUserRecibido + "\n" 
                + "crud: " + crud + "\n" 
                +"nombreTabla: " + nombreTabla + "\n" 
                +"dni: " + dni + "\n" 
                + "datoDni: " + datoDni +  "\n" 
                +"nom: " + nom + "\n" 
                + "datoNom: " + datoNom + "\n" 
                + "apellido: " + apellido + "\n" 
                + "datoApellido: " + datoApellido + "\n" 
                + "nomempresa: " + nomempresa + "\n" 
                +"datoNomempresa: " + datoNomempresa + "\n" 
                + "departament: " + departament + "\n" 
                +"datoDepartament: " + datoDepartament + "\n" 
                + "codicard: " + codicard + "\n" 
                +"datoCodicar: " + datoCodicard + "\n" 
                + "orden: " + orden + "\n" 
                + "____________________________________________________________________" + "\n");

            palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + dni + "," + datoDni + "," + nom + "," + datoNom + "," + apellido
                    + "," + datoApellido + "," + nomempresa + "," + datoNomempresa + "," + departament + "," + datoDepartament + "," + codicard + "," + datoCodicard
                    + "," + telephon + "," + datoTelephon + "," + orden;

            if (codigoUserRecibido.equals("")) {
                codigoUserRecibido = "0";
            }

            if (crud.equals("1")) {
                if (nombreTabla.equals("0")) {

                    escriptor.write(palabra);
                    escriptor.newLine();
                    escriptor.flush();
                    jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                            + "\nenvia los datos siguientes: "+ palabra + "\n");

                    List<Empleados> insertEmpleadosTelf = new ArrayList<>();

                    perEnt = new ObjectInputStream(socket.getInputStream());
                    insertEmpleadosTelf = (ArrayList) perEnt.readObject();
                    jTextArea1.append(("Empleado creado correctamente, sus datos son: \n"));
                    jTextArea1.append("Dni: " + datoDni + "\n"
                            + "Nombre: " + datoNom + "\n"
                            + "Apellido: " + datoApellido + "\n"
                            + "Nombre empresa: " + datoNomempresa + "\n"
                            + "Departamento: " + datoDepartament + "\n"
                            + "Codigo tarjeta: " + datoCodicard + "\n"
                            + "Telephon: " + datoTelephon + "\n"
                            +"____________________________________________________________________");
                    perEnt.getObjectInputFilter();
                }
            }
        }
    }
    
    public void operacionesConInsertEmpleado19(String []insertEmpleado)throws IOException, ClassNotFoundException{
        String codigoUserRecibido = insertEmpleado[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
        crud = insertEmpleado[1];
        nombreTabla = insertEmpleado[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
        String dni = insertEmpleado[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoDni = insertEmpleado[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
        String nom = insertEmpleado[5]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoNom = insertEmpleado[6];
        String apellido = insertEmpleado[7];// si es el caso el orden, si no hay ponemos 0
        String datoApellido = insertEmpleado[8]; //el codigo recibido tiene que ser el mismo que le hemos asignado
        String nomempresa = insertEmpleado[9];
        String datoNomempresa = insertEmpleado[10]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
        String departament = insertEmpleado[11]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoDepartament = insertEmpleado[12];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
        String codicard = insertEmpleado[13]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoCodicard = insertEmpleado[14];
        String mail = insertEmpleado[15];// si es el caso el orden, si no hay ponemos 0
        String datoMail = insertEmpleado[16];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
        String telephon = insertEmpleado[17]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoTelephon = insertEmpleado[18];
        orden = insertEmpleado[19];// si es el caso el orden, si no hay ponemos 0

        jTextArea1.append("____________________________________________________________________"+ "\n" 
                +"codigoUserRecibido: " + codigoUserRecibido + "\n" 
                + "crud: " + crud + "\n" 
                +"nombreTabla: " + nombreTabla + "\n" 
                +"dni: " + dni + "\n" 
                + "datoDni: " + datoDni +  "\n" 
                +"nom: " + nom + "\n" 
                + "datoNom: " + datoNom + "\n" 
                + "apellido: " + apellido + "\n" 
                + "datoApellido: " + datoApellido + "\n" 
                + "nomempresa: " + nomempresa + "\n" 
                +"datoNomempresa: " + datoNomempresa + "\n" 
                + "departament: " + departament + "\n" 
                +"datoDepartament: " + datoDepartament + "\n" 
                + "codicard: " + codicard + "\n" 
                +"datoCodicar: " + datoCodicard + "\n" 
                + "orden: " + orden + "\n" 
                + "____________________________________________________________________" + "\n");

        palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + dni + "," + datoDni + "," + nom + "," + datoNom + "," + apellido
                + "," + datoApellido + "," + nomempresa + "," + datoNomempresa + "," + departament + "," + datoDepartament + "," + codicard + "," + datoCodicard
                + "," + mail + "," + datoMail + "," + telephon + "," + datoTelephon + "," + orden;

        if (codigoUserRecibido.equals("")) {
            codigoUserRecibido = "0";
        }

        if (crud.equals("1")) {
            if (nombreTabla.equals("0")) {

                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                 jTextArea1.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguientes: "+ palabra + "\n");

                List<Empleados> insertEmpleados = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                insertEmpleados = (ArrayList) perEnt.readObject();
                 jTextArea1.append(("Empleado creado correctamente, sus datos son: \n"));
                 jTextArea1.append("Dni: " + datoDni + "\n"
                        + "Nombre: " + datoNom + "\n"
                        + "Apellido: " + datoApellido + "\n"
                        + "Nombre empresa: " + datoNomempresa + "\n"
                        + "Departamento: " + datoDepartament + "\n"
                        + "Codigo tarjeta: " + datoCodicard + "\n"
                        + "Mail: " + datoMail + "\n"
                        + "Telefono: " + datoTelephon + "\n"
                        +"____________________________________________________________________");
                perEnt.getObjectInputFilter();
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonLogoutSession;
    private javax.swing.JComboBox<String> jComboBoxTablas;
    private javax.swing.JComboBox<String> jComboBoxTipoOperacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelCodigo;
    private javax.swing.JLabel jLabelColumna;
    private javax.swing.JLabel jLabelOrden;
    private javax.swing.JLabel jLabelPalabra;
    private javax.swing.JLabel jLabelResultadoBusqueda;
    private javax.swing.JLabel jLabelTablas;
    private javax.swing.JLabel jLabelUserCode;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldColumna;
    private javax.swing.JTextField jTextFieldOrden;
    private javax.swing.JTextField jTextFieldPalabra;
    // End of variables declaration//GEN-END:variables

    void setDefaultCloseOperation() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
