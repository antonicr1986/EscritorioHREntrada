package vistas;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import modelo.Empleados;
import modelo.Empresa;
import modelo.Jornada;
import modelo.Users;

/**
 *
 * @author antonio minero
 */
public class FormVentanasUsuario extends javax.swing.JFrame {

    Socket socket;
    
    String palabra ="";
    BufferedReader lector;
    BufferedWriter escriptor;
    ObjectInputStream perEnt;
    String codigoUserRecibido;
    
    String codigo;
    String crud;
    String nombreTabla;
    String columna;
    String orden;
    
    boolean select = false;
    boolean insert = false;
    boolean update = false;
    boolean delete = false;

    public String getPalabra() {
        return palabra;
    }

    public void setPalabra(String palabra) {
        this.palabra = palabra;
    }
    
    public JLabel getjLabel1() {
        return jLabelUserCode;
    }

    public void setjLabel1(String nuevoTexto) {
        jLabelUserCode.setText(nuevoTexto);
    }
    
    public JLabel getjUserCode1() {
        return jLabelUserCode1;
    }

    public void setjUserCode1(String nuevoTexto) {
        jLabelUserCode1.setText(nuevoTexto);
    }
    
    public JLabel getjUserCode2() {
        return jLabelUserCode2;
    }

    public void setjUserCode2(String nuevoTexto) {
        jLabelUserCode2.setText(nuevoTexto);
    }
    
     public JLabel getjUserCode3() {
        return jLabelUserCode3;
    }

    public void setjUserCode3(String nuevoTexto) {
        jLabelUserCode3.setText(nuevoTexto);
    }    
    
    
    /**
     * Creates new form FormVentanasUsuario
     */
    public FormVentanasUsuario(String codigo) {
        setMinimumSize(new Dimension(950, 550));
        setMaximumSize(new Dimension(1100,1000));
        setLocationRelativeTo(null);
        setResizable(false);
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);   
        initComponents();

        buttonGroup.add(jRadioButtonEmpresa);
        buttonGroup.add(jRadioButtonEmpleado);
        buttonGroup.add(jRadioButtonJornada);
        
        //JOptionPane.showMessageDialog(null,"codigo: "+codigo);
        if (codigo !=null && codigo.charAt(0) == 'A'){
             buttonGroup.add(jRadioButtonUsers);
             jRadioButtonUsers.setVisible(true);
        }else{
            jComboBoxTablas.removeItemAt(1);
            jRadioButtonUsers.setVisible(false);
        }
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                logout();
                
            }
        });   
    }
    
    private void logout(){
        try {
            //IMPLEMENTA
            Socket socket = MainForm.socket;

            if (socket != null && socket.isConnected()) {
                // Obtener flujos de entrada y salida.
                lector = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                escriptor = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

                // Aquí enviamos la señal de "logout" al servidor.
                String logoutSignal = "exit";
                escriptor.write(logoutSignal);
                escriptor.newLine();
                escriptor.flush();

                // Resto de la lógica de cierre de sesión.
                lector.close();
                escriptor.close();
                socket.close();

                palabra = "exit";

                this.dispose();

                MainForm mainForm = new MainForm();
                mainForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                mainForm.setLocation(mainForm.getX(),mainForm.getY()); 
                mainForm.setVisible(true);     
                mainForm.setPalabra(palabra);
                //JOptionPane.showMessageDialog(null,"Palabra: "+ palabra+"\nPalabra: "+mainForm.getPalabra());     
            }
            else{
                 JOptionPane.showMessageDialog(null,"Problemas con la conexión al socket.");     
            }
         } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelAñadir = new javax.swing.JPanel();
        jPanelBusqueda3 = new javax.swing.JPanel();
        jButtonAñadirATabla = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaInsert = new javax.swing.JTextArea();
        jLabelCodigo3 = new javax.swing.JLabel();
        jLabelUserCode3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldDni = new javax.swing.JTextField();
        jTextFieldNom = new javax.swing.JTextField();
        jTextFieldApellido = new javax.swing.JTextField();
        jTextFieldNomEmpresa = new javax.swing.JTextField();
        jTextFieldDepartament = new javax.swing.JTextField();
        jTextFieldCodicard = new javax.swing.JTextField();
        jTextFieldMail = new javax.swing.JTextField();
        jTextFieldTelephon = new javax.swing.JTextField();
        jTextFieldLogin = new javax.swing.JTextField();
        jTextFieldPass = new javax.swing.JTextField();
        jTextFieldNumtipe = new javax.swing.JTextField();
        jTextFieldAddress = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabelCamposAIntroducir = new javax.swing.JLabel();
        jRadioButtonEmpresa = new javax.swing.JRadioButton();
        jRadioButtonEmpleado = new javax.swing.JRadioButton();
        jRadioButtonJornada = new javax.swing.JRadioButton();
        jRadioButtonUsers = new javax.swing.JRadioButton();
        jPanelActualizar = new javax.swing.JPanel();
        jPanelBusqueda1 = new javax.swing.JPanel();
        jButtonActualizarTabla = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaUpdate = new javax.swing.JTextArea();
        jLabelCodigo1 = new javax.swing.JLabel();
        jLabelTabla1 = new javax.swing.JLabel();
        jLabelPalabra1 = new javax.swing.JLabel();
        jLabelColumna1 = new javax.swing.JLabel();
        jComboBoxTablas1 = new javax.swing.JComboBox<>();
        jComboBoxColumna1 = new javax.swing.JComboBox<>();
        jTextFieldPalabra1 = new javax.swing.JTextField();
        jLabelUserCode1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanelBorrar = new javax.swing.JPanel();
        jPanelBusqueda2 = new javax.swing.JPanel();
        jButtonBorrar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaDelete = new javax.swing.JTextArea();
        jLabelCodigo2 = new javax.swing.JLabel();
        jLabelTabla2 = new javax.swing.JLabel();
        jLabelPalabra2 = new javax.swing.JLabel();
        jLabelColumna2 = new javax.swing.JLabel();
        jComboBoxTablas2 = new javax.swing.JComboBox<>();
        jComboBoxColumna2 = new javax.swing.JComboBox<>();
        jTextFieldPalabra2 = new javax.swing.JTextField();
        jLabelUserCode2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanelBusqueda = new javax.swing.JPanel();
        jButtonBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSelect = new javax.swing.JTextArea();
        jLabelCodigo = new javax.swing.JLabel();
        jLabelOperacion = new javax.swing.JLabel();
        jLabelTabla = new javax.swing.JLabel();
        jLabelPalabra = new javax.swing.JLabel();
        jLabelColumna = new javax.swing.JLabel();
        jComboBoxTipoOperacion = new javax.swing.JComboBox<>();
        jComboBoxTablas = new javax.swing.JComboBox<>();
        jComboBoxColumna = new javax.swing.JComboBox<>();
        jLabelOrdenar = new javax.swing.JLabel();
        jComboBoxOrdenar = new javax.swing.JComboBox<>();
        jTextFieldPalabra = new javax.swing.JTextField();
        jLabelUserCode = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanelAcercaDe = new javax.swing.JPanel();
        jLabelHREntrada = new javax.swing.JLabel();
        jLabelDescripcion = new javax.swing.JLabel();
        jLabelAutores = new javax.swing.JLabel();
        jLabel_Imagen = new javax.swing.JLabel();
        jPanelOtros = new javax.swing.JPanel();
        jLabel_ImagenOtros = new javax.swing.JLabel();
        jPanelGestionUsuario = new javax.swing.JPanel();
        jButtonLogout = new javax.swing.JButton();
        jButtonCambiarContraseña = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(1200, 1200));

        jPanelBusqueda3.setBackground(new java.awt.Color(204, 255, 204));

        jButtonAñadirATabla.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonAñadirATabla.setText("AÑADIR A TABLA");
        jButtonAñadirATabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAñadirATablaActionPerformed(evt);
            }
        });

        jTextAreaInsert.setColumns(20);
        jTextAreaInsert.setRows(5);
        jScrollPane4.setViewportView(jTextAreaInsert);

        jLabelCodigo3.setText("Codigo:");

        jLabelUserCode3.setText("jLabelUserCode");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("RESULTADO FINAL");

        jTextFieldDni.setText("dni");

        jTextFieldNom.setText("nom");

        jTextFieldApellido.setText("apellido");

        jTextFieldNomEmpresa.setText("nomempresa");

        jTextFieldDepartament.setText("departament");

        jTextFieldCodicard.setText("codicard");

        jTextFieldMail.setText("mail");

        jTextFieldTelephon.setText("telephon");

        jTextFieldLogin.setText("login");

        jTextFieldPass.setText("pass");

        jTextFieldNumtipe.setText("numtipe");

        jTextFieldAddress.setText("address");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Selecciona una tabla:");

        jLabelCamposAIntroducir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelCamposAIntroducir.setText("CAMPOS A INTRODUCIR:");

        jRadioButtonEmpresa.setBackground(new java.awt.Color(204, 255, 204));
        jRadioButtonEmpresa.setText("empresa");
        jRadioButtonEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonEmpresaActionPerformed(evt);
            }
        });

        jRadioButtonEmpleado.setBackground(new java.awt.Color(204, 255, 204));
        jRadioButtonEmpleado.setText("empleados");
        jRadioButtonEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonEmpleadoActionPerformed(evt);
            }
        });

        jRadioButtonJornada.setBackground(new java.awt.Color(204, 255, 204));
        jRadioButtonJornada.setText("jornada");
        jRadioButtonJornada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonJornadaActionPerformed(evt);
            }
        });

        jRadioButtonUsers.setBackground(new java.awt.Color(204, 255, 204));
        jRadioButtonUsers.setText("users");
        jRadioButtonUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonUsersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBusqueda3Layout = new javax.swing.GroupLayout(jPanelBusqueda3);
        jPanelBusqueda3.setLayout(jPanelBusqueda3Layout);
        jPanelBusqueda3Layout.setHorizontalGroup(
            jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jLabelUserCode3))
                    .addComponent(jLabelCodigo3)
                    .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                        .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonEmpresa)
                            .addComponent(jRadioButtonJornada))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonEmpleado)
                            .addComponent(jRadioButtonUsers)))
                    .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jButtonAñadirATabla)))
                .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabelCamposAIntroducir)
                            .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                                .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                                        .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                                                .addGap(37, 37, 37)
                                                .addComponent(jTextFieldDepartament, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jTextFieldAddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBusqueda3Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jTextFieldDni, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(23, 23, 23)))
                                .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBusqueda3Layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jTextFieldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jTextFieldCodicard, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldPass, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                    .addComponent(jTextFieldMail)
                                    .addComponent(jTextFieldApellido))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldTelephon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldNomEmpresa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldNumtipe, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBusqueda3Layout.setVerticalGroup(
            jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCodigo3)
                            .addComponent(jLabelUserCode3)
                            .addComponent(jLabelCamposAIntroducir))
                        .addGap(93, 93, 93)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonEmpresa)
                            .addComponent(jRadioButtonEmpleado))
                        .addGap(7, 7, 7)
                        .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonJornada)
                            .addComponent(jRadioButtonUsers)))
                    .addGroup(jPanelBusqueda3Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNomEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldDepartament, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldCodicard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldTelephon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNumtipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelBusqueda3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonAñadirATabla)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout jPanelAñadirLayout = new javax.swing.GroupLayout(jPanelAñadir);
        jPanelAñadir.setLayout(jPanelAñadirLayout);
        jPanelAñadirLayout.setHorizontalGroup(
            jPanelAñadirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBusqueda3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelAñadirLayout.setVerticalGroup(
            jPanelAñadirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBusqueda3, javax.swing.GroupLayout.PREFERRED_SIZE, 565, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Añadir", jPanelAñadir);

        jPanelBusqueda1.setBackground(new java.awt.Color(255, 255, 204));

        jButtonActualizarTabla.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonActualizarTabla.setText("ACTUALIZAR TABLA");
        jButtonActualizarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarTablaActionPerformed(evt);
            }
        });

        jTextAreaUpdate.setColumns(20);
        jTextAreaUpdate.setRows(5);
        jScrollPane2.setViewportView(jTextAreaUpdate);

        jLabelCodigo1.setText("Codigo:");

        jLabelTabla1.setText("Tabla:");

        jLabelPalabra1.setText("Palabra a buscar:");

        jLabelColumna1.setText("Columna:");

        jComboBoxTablas1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "empleados", "empresa", "jornada", "users" }));

        jComboBoxColumna1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "todas", "dni", "nom", "apellido", "nomempresa", "departament", "codicard", "mail", "telephon" }));

        jLabelUserCode1.setText("jLabelUserCode");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("RESULTADO ACTUALIZACIÓN");

        javax.swing.GroupLayout jPanelBusqueda1Layout = new javax.swing.GroupLayout(jPanelBusqueda1);
        jPanelBusqueda1.setLayout(jPanelBusqueda1Layout);
        jPanelBusqueda1Layout.setHorizontalGroup(
            jPanelBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBusqueda1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanelBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonActualizarTabla)
                    .addGroup(jPanelBusqueda1Layout.createSequentialGroup()
                        .addGroup(jPanelBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTabla1)
                            .addComponent(jLabelPalabra1)
                            .addComponent(jLabelColumna1)
                            .addComponent(jLabelCodigo1))
                        .addGap(43, 43, 43)
                        .addGroup(jPanelBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxColumna1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldPalabra1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxTablas1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelUserCode1, javax.swing.GroupLayout.Alignment.LEADING))))
                .addGap(48, 48, 48)
                .addGroup(jPanelBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        jPanelBusqueda1Layout.setVerticalGroup(
            jPanelBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBusqueda1Layout.createSequentialGroup()
                .addGroup(jPanelBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBusqueda1Layout.createSequentialGroup()
                        .addGroup(jPanelBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelBusqueda1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabelCodigo1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBusqueda1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel9)))
                        .addGroup(jPanelBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelBusqueda1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(jPanelBusqueda1Layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(jLabelTabla1)
                                .addGap(29, 29, 29)
                                .addComponent(jLabelPalabra1)
                                .addGap(31, 31, 31)
                                .addComponent(jLabelColumna1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanelBusqueda1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabelUserCode1)
                        .addGap(81, 81, 81)
                        .addComponent(jComboBoxTablas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addGroup(jPanelBusqueda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelBusqueda1Layout.createSequentialGroup()
                                .addComponent(jTextFieldPalabra1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44))
                            .addComponent(jComboBoxColumna1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)))
                .addComponent(jButtonActualizarTabla)
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout jPanelActualizarLayout = new javax.swing.GroupLayout(jPanelActualizar);
        jPanelActualizar.setLayout(jPanelActualizarLayout);
        jPanelActualizarLayout.setHorizontalGroup(
            jPanelActualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1048, Short.MAX_VALUE)
            .addGroup(jPanelActualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelActualizarLayout.createSequentialGroup()
                    .addComponent(jPanelBusqueda1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanelActualizarLayout.setVerticalGroup(
            jPanelActualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
            .addGroup(jPanelActualizarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanelBusqueda1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Actualizar", jPanelActualizar);

        jPanelBorrar.setBackground(new java.awt.Color(255, 102, 102));

        jPanelBusqueda2.setBackground(new java.awt.Color(255, 204, 204));

        jButtonBorrar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonBorrar.setText("BORRAR");
        jButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarActionPerformed(evt);
            }
        });

        jTextAreaDelete.setColumns(20);
        jTextAreaDelete.setRows(5);
        jScrollPane3.setViewportView(jTextAreaDelete);

        jLabelCodigo2.setText("Codigo:");

        jLabelTabla2.setText("Tabla:");

        jLabelPalabra2.setText("Palabra a buscar:");

        jLabelColumna2.setText("Columna:");

        jComboBoxTablas2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "empleados", "empresa", "jornada", "users" }));

        jComboBoxColumna2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "todas", "dni", "nom", "apellido", "nomempresa", "departament", "codicard", "mail", "telephon" }));

        jLabelUserCode2.setText("jLabelUserCode");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("RESULTADO");

        javax.swing.GroupLayout jPanelBusqueda2Layout = new javax.swing.GroupLayout(jPanelBusqueda2);
        jPanelBusqueda2.setLayout(jPanelBusqueda2Layout);
        jPanelBusqueda2Layout.setHorizontalGroup(
            jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBusqueda2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanelBusqueda2Layout.createSequentialGroup()
                            .addComponent(jButtonBorrar)
                            .addGap(168, 168, 168))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBusqueda2Layout.createSequentialGroup()
                            .addGroup(jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelTabla2)
                                .addComponent(jLabelPalabra2)
                                .addComponent(jLabelColumna2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jComboBoxColumna2, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldPalabra2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jComboBoxTablas2, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelUserCode2, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGap(43, 43, 43)))
                    .addGroup(jPanelBusqueda2Layout.createSequentialGroup()
                        .addComponent(jLabelCodigo2)
                        .addGap(206, 206, 206)))
                .addGroup(jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanelBusqueda2Layout.setVerticalGroup(
            jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBusqueda2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCodigo2)
                    .addComponent(jLabelUserCode2)
                    .addComponent(jLabel10))
                .addGroup(jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBusqueda2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanelBusqueda2Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addGroup(jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTabla2)
                            .addComponent(jComboBoxTablas2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelBusqueda2Layout.createSequentialGroup()
                                .addGroup(jPanelBusqueda2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelPalabra2)
                                    .addComponent(jTextFieldPalabra2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(jLabelColumna2))
                            .addComponent(jComboBoxColumna2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 258, Short.MAX_VALUE)))
                .addComponent(jButtonBorrar)
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout jPanelBorrarLayout = new javax.swing.GroupLayout(jPanelBorrar);
        jPanelBorrar.setLayout(jPanelBorrarLayout);
        jPanelBorrarLayout.setHorizontalGroup(
            jPanelBorrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBorrarLayout.createSequentialGroup()
                .addComponent(jPanelBusqueda2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelBorrarLayout.setVerticalGroup(
            jPanelBorrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBusqueda2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Borrar", jPanelBorrar);

        jPanelBusqueda.setBackground(new java.awt.Color(153, 204, 255));

        jButtonBuscar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButtonBuscar.setText("BUSCAR");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jTextAreaSelect.setColumns(20);
        jTextAreaSelect.setRows(5);
        jScrollPane1.setViewportView(jTextAreaSelect);

        jLabelCodigo.setText("Codigo:");

        jLabelOperacion.setText("Tipo de operacion:");

        jLabelTabla.setText("Tabla:");

        jLabelPalabra.setText("Palabra a buscar:");

        jLabelColumna.setText("Columna:");

        jComboBoxTipoOperacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select", "insert" }));

        jComboBoxTablas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "empleados", "users", "empresa", "jornada" }));

        jComboBoxColumna.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "todas", "dni", "nom", "apellido", "nomempresa", "departament", "codicard", "mail", "telephon" }));

        jLabelOrdenar.setText("Ordenar:");

        jComboBoxOrdenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Si", "No" }));

        jLabelUserCode.setText("jLabelUserCode");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("RESULTADO BÚSQUEDA");

        javax.swing.GroupLayout jPanelBusquedaLayout = new javax.swing.GroupLayout(jPanelBusqueda);
        jPanelBusqueda.setLayout(jPanelBusquedaLayout);
        jPanelBusquedaLayout.setHorizontalGroup(
            jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBusquedaLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanelBusquedaLayout.createSequentialGroup()
                            .addComponent(jButtonBuscar)
                            .addGap(168, 168, 168))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBusquedaLayout.createSequentialGroup()
                            .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelOperacion)
                                .addComponent(jLabelTabla)
                                .addComponent(jLabelPalabra)
                                .addComponent(jLabelColumna)
                                .addComponent(jLabelOrdenar))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jComboBoxOrdenar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxColumna, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldPalabra, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jComboBoxTablas, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxTipoOperacion, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelUserCode, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGap(43, 43, 43)))
                    .addGroup(jPanelBusquedaLayout.createSequentialGroup()
                        .addComponent(jLabelCodigo)
                        .addGap(206, 206, 206)))
                .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanelBusquedaLayout.setVerticalGroup(
            jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBusquedaLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCodigo)
                    .addComponent(jLabelUserCode)
                    .addComponent(jLabel8))
                .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBusquedaLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelOperacion)
                            .addComponent(jComboBoxTipoOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTabla)
                            .addComponent(jComboBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelBusquedaLayout.createSequentialGroup()
                                .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelPalabra)
                                    .addComponent(jTextFieldPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(jLabelColumna))
                            .addComponent(jComboBoxColumna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanelBusquedaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelOrdenar)
                            .addComponent(jComboBoxOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 206, Short.MAX_VALUE)
                        .addComponent(jButtonBuscar))
                    .addGroup(jPanelBusquedaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addGap(34, 34, 34))
        );

        jTabbedPane1.addTab("Búsqueda", jPanelBusqueda);

        jPanelAcercaDe.setBackground(new java.awt.Color(153, 153, 153));

        jLabelHREntrada.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabelHREntrada.setText("HREntrada ©");

        jLabelDescripcion.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabelDescripcion.setText("Trabajo final de CFGS DAM");

        jLabelAutores.setFont(new java.awt.Font("Dialog", 2, 24)); // NOI18N
        jLabelAutores.setText("By David Valentin, Gustavo Señorans y Antonio Company");

        jLabel_Imagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/HREntrada.jpg"))); // NOI18N
        jLabel_Imagen.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel_Imagen.setIconTextGap(0);

        javax.swing.GroupLayout jPanelAcercaDeLayout = new javax.swing.GroupLayout(jPanelAcercaDe);
        jPanelAcercaDe.setLayout(jPanelAcercaDeLayout);
        jPanelAcercaDeLayout.setHorizontalGroup(
            jPanelAcercaDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAcercaDeLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanelAcercaDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Imagen)
                    .addComponent(jLabelAutores)
                    .addComponent(jLabelDescripcion)
                    .addComponent(jLabelHREntrada))
                .addContainerGap(316, Short.MAX_VALUE))
        );
        jPanelAcercaDeLayout.setVerticalGroup(
            jPanelAcercaDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAcercaDeLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabelHREntrada)
                .addGap(26, 26, 26)
                .addComponent(jLabelDescripcion)
                .addGap(26, 26, 26)
                .addComponent(jLabelAutores)
                .addGap(49, 49, 49)
                .addComponent(jLabel_Imagen)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Acerca de", jPanelAcercaDe);

        jPanelOtros.setBackground(new java.awt.Color(153, 153, 153));
        jPanelOtros.setMaximumSize(new java.awt.Dimension(1200, 1000));
        jPanelOtros.setMinimumSize(new java.awt.Dimension(950, 500));
        jPanelOtros.setPreferredSize(new java.awt.Dimension(950, 500));

        jLabel_ImagenOtros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/HREntrada.jpg"))); // NOI18N
        jLabel_ImagenOtros.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanelOtrosLayout = new javax.swing.GroupLayout(jPanelOtros);
        jPanelOtros.setLayout(jPanelOtrosLayout);
        jPanelOtrosLayout.setHorizontalGroup(
            jPanelOtrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOtrosLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel_ImagenOtros)
                .addContainerGap(642, Short.MAX_VALUE))
        );
        jPanelOtrosLayout.setVerticalGroup(
            jPanelOtrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelOtrosLayout.createSequentialGroup()
                .addContainerGap(265, Short.MAX_VALUE)
                .addComponent(jLabel_ImagenOtros)
                .addGap(60, 60, 60))
        );

        jTabbedPane1.addTab("Otros", jPanelOtros);

        jPanelGestionUsuario.setBackground(new java.awt.Color(153, 153, 153));

        jButtonLogout.setBackground(new java.awt.Color(255, 255, 255));
        jButtonLogout.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButtonLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/PowerOff.jpg"))); // NOI18N
        jButtonLogout.setText("Logout Session");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        jButtonCambiarContraseña.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButtonCambiarContraseña.setText("Cambiar contraseña usuario");
        jButtonCambiarContraseña.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCambiarContraseñaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGestionUsuarioLayout = new javax.swing.GroupLayout(jPanelGestionUsuario);
        jPanelGestionUsuario.setLayout(jPanelGestionUsuarioLayout);
        jPanelGestionUsuarioLayout.setHorizontalGroup(
            jPanelGestionUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionUsuarioLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanelGestionUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCambiarContraseña)
                    .addComponent(jButtonLogout))
                .addContainerGap(679, Short.MAX_VALUE))
        );
        jPanelGestionUsuarioLayout.setVerticalGroup(
            jPanelGestionUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGestionUsuarioLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jButtonCambiarContraseña)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 334, Short.MAX_VALUE)
                .addComponent(jButtonLogout)
                .addGap(43, 43, 43))
        );

        jTabbedPane1.addTab("Gestión usuario", jPanelGestionUsuario);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 976, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCambiarContraseñaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCambiarContraseñaActionPerformed
        // TODO add your handling code here:
        CambiarPasswordForm ventanaCambioPass = new CambiarPasswordForm ();
        ventanaCambioPass.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        ventanaCambioPass.setVisible(true);
    }//GEN-LAST:event_jButtonCambiarContraseñaActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        // TODO add your handling code here:
        logout();
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // TODO add your handling code here:
        select = true;

        insert = false;
        update = false;
        delete = false;
        ejecutarAccion();
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarActionPerformed
        // TODO add your handling code here:
        select = false;
        insert = false;
        update = false;

        delete = true;

        ejecutarAccion();
    }//GEN-LAST:event_jButtonBorrarActionPerformed

    private void jButtonActualizarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarTablaActionPerformed
        // TODO add your handling code here:
        update = true;

        select = false;
        insert = false;
        delete = false;

        ejecutarAccion();
    }//GEN-LAST:event_jButtonActualizarTablaActionPerformed

    private void jRadioButtonUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonUsersActionPerformed
        // TODO add your handling code here:
        activarDesactivarTextFields();
    }//GEN-LAST:event_jRadioButtonUsersActionPerformed

    private void jRadioButtonJornadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonJornadaActionPerformed
        // TODO add your handling code here:
        activarDesactivarTextFields();
    }//GEN-LAST:event_jRadioButtonJornadaActionPerformed

    private void jRadioButtonEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonEmpleadoActionPerformed
        // TODO add your handling code here:
        activarDesactivarTextFields();
    }//GEN-LAST:event_jRadioButtonEmpleadoActionPerformed

     //RADIO BUTTONS EVENTOS QUE SE DISPARAN AL HACER CLICK EN ALGUNO DE ELLOS
    private void jRadioButtonEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonEmpresaActionPerformed
        // TODO add your handling code here:
        activarDesactivarTextFields();
    }//GEN-LAST:event_jRadioButtonEmpresaActionPerformed

    private void jButtonAñadirATablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAñadirATablaActionPerformed
        // TODO add your handling code here:
        insert = true;

        select = false;
        update = false;
        delete = false;

        jComboBoxTipoOperacion.setSelectedItem("insert");

        if (jRadioButtonEmpresa.isSelected()){
            nombreTabla = "empresa";
        }else if (jRadioButtonEmpleado.isSelected()){
            nombreTabla = "empleados";
        }else if (jRadioButtonJornada.isSelected()){
            nombreTabla = "jornada";
        }else if (jRadioButtonUsers.isSelected()){
            nombreTabla = "users";
        }
        ejecutarAccion();
    }//GEN-LAST:event_jButtonAñadirATablaActionPerformed

    
     private void ejecutarAccion(){
        try {
            // TODO add your handling code here:
            socket = MainForm.socket;
            
            lector = new BufferedReader(new InputStreamReader(socket.getInputStream()));//flujo lectura del server
            escriptor = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));//flujo envio al server
            
            
            codigo = jLabelUserCode.getText(); //el codigo recibido tiene que ser el mismo que le hemos asignado
            crud = jComboBoxTipoOperacion.getSelectedItem().toString(); //Tipo de operacion
            if (select){
                nombreTabla = jComboBoxTablas.getSelectedItem().toString(); //Será el numero de tabla. (ej: 0->empleados 1->users 2-empresa 3->jornada) 
            }    
            columna = jComboBoxColumna.getSelectedItem().toString(); //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String palabraAbuscar = jTextFieldPalabra.getText();// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            if (jTextFieldPalabra.getText().isEmpty()||jTextFieldPalabra.getText().isBlank()){//Para que cambie el valor de vacio a 0 para enviar al server.
                palabraAbuscar = "0";
            }
            orden = jComboBoxOrdenar.getSelectedItem().toString();// si es el caso el orden, si no hay ponemos 0          
            
            if (select){
                jTextAreaSelect.setText("");
            }        
            
            //Canviamos los valores de los combo box a los numericos correspondientes          
            switch (crud){
                case "select":
                    crud = "0";
                    break;
                case "insert":
                    crud = "1";
                    break;
                case "update":
                    crud = "2";
                    break;
                case "delete":
                    crud = "3";
                    break;
            }
            
            switch (nombreTabla){
                case "empleados":
                    nombreTabla = "0";
                    if (insert){
                         palabraAbuscar = "dni,"+jTextFieldDni.getText()+",nom,"+jTextFieldNom.getText()+",apellido,"+jTextFieldApellido.getText()
                            +",nomempresa,"+jTextFieldNomEmpresa.getText()+",departament,"+jTextFieldDepartament.getText()
                            +",codicard,"+jTextFieldCodicard.getText()+",mail,"+jTextFieldMail.getText()+",telephon,"+jTextFieldTelephon.getText();
                    }                   
                    break;
                case "users":
                    nombreTabla = "1";
                    if (insert){
                        palabraAbuscar = "login,"+jTextFieldLogin.getText()+",pass,"+jTextFieldPass.getText()
                            +",numtipe,"+jTextFieldNumtipe.getText()+",dni,"+jTextFieldDni.getText();
                    }
                    break;
                case "empresa":
                    nombreTabla = "2";
                    if (insert){
                        palabraAbuscar = "nom,"+jTextFieldNom.getText()+",address,"+jTextFieldAddress.getText()+",telephon,"+jTextFieldTelephon.getText();                 
                    } 
                    break;
                case "jornada":
                    nombreTabla = "3";
                    if (insert){
                        palabraAbuscar = "dni,"+jTextFieldDni.getText();
                    }                  
                    break;
            }
            
            switch (columna){
                case "todas":
                    columna = "0";
                    break;
            }
            
            switch (orden){
                case "Si":
                    orden = "0";
                    break;
                case "No":
                    orden = "1";
                    break;
            }
            
            if(select){
                palabra = codigo + "," + crud + "," + nombreTabla + "," + columna + "," + palabraAbuscar + "," + orden;
                jTextAreaSelect.append("Enviado al server: "+palabra+"\n");
            }else if (insert){
                palabra = codigo + "," + crud + "," + nombreTabla + "," + palabraAbuscar + "," + orden;
                jTextAreaInsert.append("Enviado al server: "+palabra+"\n");
            }else{
                 palabra = codigo + "," + crud + "," + nombreTabla + "," + columna + "," + palabraAbuscar + "," + orden;
            }
                   
            //JOptionPane.showMessageDialog(null,"Frase enviada al server: "+palabra); 
             
            
            // y ahora comprobamos que la frase este correcta si no enviamos una establecida (menos el codigo que sera error, es por si fallan las otras palabras)

            String[] frase = new String[6];
            frase = palabra.split(",");

            String[] NomApellido = new String[8];
            NomApellido = palabra.split(",");

            String[] insertEmpresas = new String[10];
            insertEmpresas = palabra.split(",");

            String[] insertUsuarios = new String[12];
            insertUsuarios = palabra.split(",");

            String[] insertEmpleadoMailTelf = new String[16];
            insertEmpleadoMailTelf = palabra.split(",");

            String[] insertEmpleadoMT = new String[18];
            insertEmpleadoMT = palabra.split(",");

            String[] insertEmpleado = new String[20];
            insertEmpleado = palabra.split(",");

            if (!codigo.equals(frase[0]) || !codigo.equals(NomApellido[0])
                    || !codigo.equals(insertEmpresas[0]) || !codigo.equals(insertUsuarios[0])
                    || !codigo.equals(insertEmpleadoMailTelf[0]) || !codigo.equals(insertEmpleadoMT[0])
                    || !codigo.equals(insertEmpleado[0])) {

                jTextAreaSelect.append("El codigo es erroneo");

            } else if (frase[5].equals("0") || frase[5].equals("1")) {
                codigoUserRecibido = frase[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
                crud = frase[1];
                nombreTabla = frase[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
                columna = frase[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
                palabraAbuscar = frase[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
                orden = frase[5];// si es el caso el orden, si no hay ponemos 0

                jTextAreaSelect.append("____________________________________________________________________"+ "\n"
                    +"codigoUserRecibido: " + codigoUserRecibido + "\n"
                    +"crud: " + crud+ "\n"
                    +"nombreTabla: " + nombreTabla+ "\n"
                    +"columna: " + columna+ "\n"
                    +"palabraAbuscar: " + palabraAbuscar+ "\n"
                    +"orden: " + orden + "\n"
                    +"____________________________________________________________________" + "\n");

                palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + columna + "," + palabraAbuscar + "," + orden;

                if (codigoUserRecibido.equals("")) {
                    codigoUserRecibido = "0";
                }

                if (crud.equals("0")) {/*SELECT*/  
                    operacionesConSelect( columna, palabra, palabraAbuscar);
                }

            } else if (NomApellido[7].equals("0") || NomApellido[7].equals("1")) { //NomApellido7
                operacionesConApellidos7( NomApellido);
                
            } else if (insertEmpresas[9].equals("0") || insertEmpresas[9].equals("1")) {
                operacionesConInsertEmpresas( insertEmpresas);
                
            } else if (insertUsuarios[11].equals("0") || insertUsuarios[11].equals("1")) {
                operacionesConInsertUsuarios( insertUsuarios);
                
            } else if (insertEmpleadoMailTelf[15].equals("0") || insertEmpleadoMailTelf[15].equals("1")) {
                operacionesConInsertEmpleadoMailTelf( insertEmpleadoMailTelf);
                
            }else if (insertEmpleadoMT[17].equals("0") || insertEmpleadoMT[17].equals("1") ) {
                operacionsConInsertEmpleadoMT17y15(insertEmpleadoMT);
            } else if (insertEmpleado[19].equals("0") || insertEmpleado[19].equals("1")) {
                operacionesConInsertEmpleado19(insertEmpleado);             
            }
        }  catch (UnknownHostException ex) {
            Logger.getLogger(FormVentanasUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }catch (IOException ex) {
            Logger.getLogger(FormVentanasUsuario.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormVentanasUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }catch(Exception ex){
            Logger.getLogger(FormVentanasUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormVentanasUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormVentanasUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormVentanasUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormVentanasUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new FormVentanasUsuario().setVisible(true);
            }
        });
    }
    
    public void operacionesConSelect ( String columna, String palabra, String palabraAbuscar) throws IOException, ClassNotFoundException{
         if (nombreTabla.equals("0") && columna.equals("dni")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                System.out.println("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empleados> listaPersonasdni = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaPersonasdni = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaPersonasdni.size(); i++) {
                    if (columna.equals("dni") && palabraAbuscar.equals(listaPersonasdni.get(i).getDni())) {
                        jTextAreaSelect.append("Dni: " + listaPersonasdni.get(i).getDni() + "\n"
                                + "Nombre: " + listaPersonasdni.get(i).getNom() + "\n"
                                + "Apellido: " + listaPersonasdni.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaPersonasdni.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaPersonasdni.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaPersonasdni.get(i).getCodicard() + "\n"
                                + "Mail: " + listaPersonasdni.get(i).getMail() + "\n"
                                + "Teléfono: " + listaPersonasdni.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("0") && columna.equals("nomempresa")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empleados> listaTotalEmpleadosNomEmpresa = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalEmpleadosNomEmpresa = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalEmpleadosNomEmpresa.size(); i++) {
                    if (columna.equals("nomempresa") && palabraAbuscar.equals(listaTotalEmpleadosNomEmpresa.get(i).getNomempresa())) {
                        jTextAreaSelect.append("Dni: " + listaTotalEmpleadosNomEmpresa.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalEmpleadosNomEmpresa.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalEmpleadosNomEmpresa.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaTotalEmpleadosNomEmpresa.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaTotalEmpleadosNomEmpresa.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaTotalEmpleadosNomEmpresa.get(i).getCodicard() + "\n"
                                + "Mail: " + listaTotalEmpleadosNomEmpresa.get(i).getMail() + "\n"
                                + "Teléfono: " + listaTotalEmpleadosNomEmpresa.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("0") && columna.equals("departament")) {

                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                System.out.println("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empleados> listaTotalEmpleadosDepart = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalEmpleadosDepart = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalEmpleadosDepart.size(); i++) {
                    if (columna.equals("departament") && palabraAbuscar.equals(listaTotalEmpleadosDepart.get(i).getDepartament())) {
                        jTextAreaSelect.append("Dni: " + listaTotalEmpleadosDepart.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalEmpleadosDepart.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalEmpleadosDepart.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaTotalEmpleadosDepart.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaTotalEmpleadosDepart.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaTotalEmpleadosDepart.get(i).getCodicard() + "\n"
                                + "Mail: " + listaTotalEmpleadosDepart.get(i).getMail() + "\n"
                                + "Teléfono: " + listaTotalEmpleadosDepart.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("0") && columna.equals("codicard")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empleados> listaTotalEmpleadosCodiCard = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalEmpleadosCodiCard = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalEmpleadosCodiCard.size(); i++) {
                    String codicard = String.valueOf(listaTotalEmpleadosCodiCard.get(i).getCodicard());
                    if (columna.equals("codicard") && palabraAbuscar.equals(codicard)) {
                        jTextAreaSelect.append("Dni: " + listaTotalEmpleadosCodiCard.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalEmpleadosCodiCard.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalEmpleadosCodiCard.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaTotalEmpleadosCodiCard.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaTotalEmpleadosCodiCard.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaTotalEmpleadosCodiCard.get(i).getCodicard() + "\n"
                                + "Mail: " + listaTotalEmpleadosCodiCard.get(i).getMail() + "\n"
                                + "Teléfono: " + listaTotalEmpleadosCodiCard.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("0") && columna.equals("mail")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empleados> listaTotalEmpleadosMail = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalEmpleadosMail = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalEmpleadosMail.size(); i++) {
                    if (columna.equals("mail") && palabraAbuscar.equals(listaTotalEmpleadosMail.get(i).getMail())) {
                        jTextAreaSelect.append("Dni: " + listaTotalEmpleadosMail.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalEmpleadosMail.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalEmpleadosMail.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaTotalEmpleadosMail.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaTotalEmpleadosMail.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaTotalEmpleadosMail.get(i).getCodicard() + "\n"
                                + "Mail: " + listaTotalEmpleadosMail.get(i).getMail() + "\n"
                                + "Teléfono: " + listaTotalEmpleadosMail.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("0") && columna.equals("telephon")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empleados> listaTotalEmpleadosTelf = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalEmpleadosTelf = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalEmpleadosTelf.size(); i++) {
                    String telephon = String.valueOf(listaTotalEmpleadosTelf.get(i).getTelephon());
                    if (columna.equals("telephon") && palabraAbuscar.equals(telephon)) {
                        jTextAreaSelect.append("Dni: " + listaTotalEmpleadosTelf.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalEmpleadosTelf.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalEmpleadosTelf.get(i).getApellido() + "\n"
                                + "Nombre empresa: " + listaTotalEmpleadosTelf.get(i).getNomempresa() + "\n"
                                + "Departamento: " + listaTotalEmpleadosTelf.get(i).getDepartament() + "\n"
                                + "Codigo tarjeta: " + listaTotalEmpleadosTelf.get(i).getCodicard() + "\n"
                                + "Mail: " + listaTotalEmpleadosTelf.get(i).getMail() + "\n"
                                + "Teléfono: " + listaTotalEmpleadosTelf.get(i).getTelephon() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();

            } else if (nombreTabla.equals("1") && columna.equals("dni")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Users> listaToUsersDni = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaToUsersDni = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaToUsersDni.size(); i++) {
                    if (columna.equals("dni") && palabraAbuscar.equals(listaToUsersDni.get(i).getDni())) {
                        jTextAreaSelect.append("Login: " + listaToUsersDni.get(i).getLogin() + "\n"
                                + "Password: " + listaToUsersDni.get(i).getPass() + "\n"
                                + "Tipo de user: " + listaToUsersDni.get(i).getNumtipe() + "\n"
                                + "DNI: " + listaToUsersDni.get(i).getDni()+ "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("1") && columna.equals("login")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Users> listaTotalUsersLogin = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalUsersLogin = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalUsersLogin.size(); i++) {
                    if (columna.equals("login") && palabraAbuscar.equals(listaTotalUsersLogin.get(i).getLogin())) {
                        jTextAreaSelect.append("Login: " + listaTotalUsersLogin.get(i).getLogin() + "\n"
                                + "Password: " + listaTotalUsersLogin.get(i).getPass() + "\n"
                                + "Tipo de user: " + listaTotalUsersLogin.get(i).getNumtipe() + "\n"
                                + "DNI: " + listaTotalUsersLogin.get(i).getDni()+ "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("1") && columna.equals("numtipe")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Users> listaTotalUsersTipe = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalUsersTipe = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalUsersTipe.size(); i++) {
                    String numtipe = String.valueOf(listaTotalUsersTipe.get(i).getNumtipe());
                    if (columna.equals("numtipe") && palabraAbuscar.equals(numtipe)) {
                        jTextAreaSelect.append("Login: " + listaTotalUsersTipe.get(i).getLogin() + "\n"
                                + "Password: " + listaTotalUsersTipe.get(i).getPass() + "\n"
                                + "Tipo de user: " + listaTotalUsersTipe.get(i).getNumtipe() + "\n"
                                + "DNI: " + listaTotalUsersTipe.get(i).getDni() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();

            } else if (nombreTabla.equals("2") && columna.equals("nom")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra+ "\n");

                List<Empresa> listaEmpresasNom = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaEmpresasNom = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaEmpresasNom.size(); i++) {
                    if (columna.equals("nom") && palabraAbuscar.equals(listaEmpresasNom.get(i).getNom())) {
                        jTextAreaSelect.append("____________________________________________________________________" + "\n"
                            +"Nombre empresa: " + listaEmpresasNom.get(i).getNom() + "\n"
                            + "Dirección: " + listaEmpresasNom.get(i).getAddress() + "\n"
                            + "Teléfono: " + listaEmpresasNom.get(i).getTelephon() + "\n"
                            +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("2") && columna.equals("address")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empresa> listaEmpresasAddress = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaEmpresasAddress = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaEmpresasAddress.size(); i++) {
                    if (columna.equals("address") && palabraAbuscar.equals(listaEmpresasAddress.get(i).getAddress())) {
                        jTextAreaSelect.append("____________________________________________________________________" + "\n"
                            +"Nombre empresa: " + listaEmpresasAddress.get(i).getNom() + "\n"
                            + "Dirección: " + listaEmpresasAddress.get(i).getAddress() + "\n"
                            + "Teléfono: " + listaEmpresasAddress.get(i).getTelephon() + "\n"
                            +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("2") && columna.equals("telephon")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empresa> listaEmpresasTelepho = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaEmpresasTelepho = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaEmpresasTelepho.size(); i++) {
                    String telephon = String.valueOf(listaEmpresasTelepho.get(i).getTelephon());
                    if (columna.equals("telephon") && palabraAbuscar.equals(telephon)) {
                        jTextAreaSelect.append("____________________________________________________________________" + "\n"
                            +"Nombre empresa: " + listaEmpresasTelepho.get(i).getNom() + "\n"
                            + "Dirección: " + listaEmpresasTelepho.get(i).getAddress() + "\n"
                            + "Teléfono: " + listaEmpresasTelepho.get(i).getTelephon() + "\n"
                            +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();

            } else if (nombreTabla.equals("3") && columna.equals("dni")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Jornada> listaToJornadaDni = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaToJornadaDni = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaToJornadaDni.size(); i++) {
                    if (columna.equals("dni") && palabraAbuscar.equals(listaToJornadaDni.get(i).getDni())) {
                        jTextAreaSelect.append("Dni: " + listaToJornadaDni.get(i).getDni() + "\n"
                                + "Nombre: " + listaToJornadaDni.get(i).getNom() + "\n"
                                + "Apellido: " + listaToJornadaDni.get(i).getApellido() + "\n"
                                + "Codigo tarjeta: " + listaToJornadaDni.get(i).getCodicard() + "\n"
                                + "Hora entrada: " + listaToJornadaDni.get(i).getHoraentrada() + "\n"
                                + "Hora salida: " + listaToJornadaDni.get(i).getHorasalida() + "\n"
                                + "Total: " + listaToJornadaDni.get(i).getTotal() + "\n"
                                + "Fecha: " + listaToJornadaDni.get(i).getFecha() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("3") && columna.equals("codicard")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Jornada> listaJornadaCodiCard = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaJornadaCodiCard = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaJornadaCodiCard.size(); i++) {
                    String codicard = String.valueOf(listaJornadaCodiCard.get(i).getCodicard());
                    if (columna.equals("codicard") && palabraAbuscar.equals(codicard)) {
                        jTextAreaSelect.append("Dni: " + listaJornadaCodiCard.get(i).getDni() + "\n"
                                + "Nombre: " + listaJornadaCodiCard.get(i).getNom() + "\n"
                                + "Apellido: " + listaJornadaCodiCard.get(i).getApellido() + "\n"
                                + "Codigo tarjeta: " + listaJornadaCodiCard.get(i).getCodicard() + "\n"
                                + "Hora entrada: " + listaJornadaCodiCard.get(i).getHoraentrada() + "\n"
                                + "Hora salida: " + listaJornadaCodiCard.get(i).getHorasalida() + "\n"
                                + "Total: " + listaJornadaCodiCard.get(i).getTotal() + "\n"
                                + "Fecha: " + listaJornadaCodiCard.get(i).getFecha() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (nombreTabla.equals("3") && columna.equals("fecha")) {
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Jornada> listaTotalJornadaFecha = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaTotalJornadaFecha = (ArrayList) perEnt.readObject();

                for (int i = 0; i < listaTotalJornadaFecha.size(); i++) {
                    if (columna.equals("fecha") && palabraAbuscar.equals(listaTotalJornadaFecha.get(i).getFecha())) {
                        jTextAreaSelect.append("Dni: " + listaTotalJornadaFecha.get(i).getDni() + "\n"
                                + "Nombre: " + listaTotalJornadaFecha.get(i).getNom() + "\n"
                                + "Apellido: " + listaTotalJornadaFecha.get(i).getApellido() + "\n"
                                + "Codigo tarjeta: " + listaTotalJornadaFecha.get(i).getCodicard() + "\n"
                                + "Hora entrada: " + listaTotalJornadaFecha.get(i).getHoraentrada() + "\n"
                                + "Hora salida: " + listaTotalJornadaFecha.get(i).getHorasalida() + "\n"
                                + "Total: " + listaTotalJornadaFecha.get(i).getTotal() + "\n"
                                + "Fecha: " + listaTotalJornadaFecha.get(i).getFecha() + "\n"
                                +"____________________________________________________________________" + "\n");
                    }
                }
                perEnt.getObjectInputFilter();
            } else if (!nombreTabla.equals(null) && columna.equals("0")) {
                mostrarTablasColumnaEquals0();
            }
        }
   
    public void mostrarTablasColumnaEquals0 () throws IOException, ClassNotFoundException{
        switch (nombreTabla) {
            case "0":
                //ahora si enviamos al server los datos que queremos, sin errores
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empleados> listaPersonas = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaPersonas = (ArrayList) perEnt.readObject();
                jTextAreaSelect.append("____________________________________________________________________"+ "\n");
                //recibo objeto
                for (int i = 0; i < listaPersonas.size(); i++) {
                    jTextAreaSelect.append("Dni: " + listaPersonas.get(i).getDni() + "\n"
                            + "Nombre: " + listaPersonas.get(i).getNom() + "\n"
                            + "Apellido: " + listaPersonas.get(i).getApellido() + "\n"
                            + "Nombre empresa: " + listaPersonas.get(i).getNomempresa() + "\n"
                            + "Departamento: " + listaPersonas.get(i).getDepartament() + "\n"
                            + "Codigo tarjeta: " + listaPersonas.get(i).getCodicard() + "\n"
                            + "Mail: " + listaPersonas.get(i).getMail() + "\n"
                            + "Telefono: " + listaPersonas.get(i).getTelephon() + "\n"
                            +"____________________________________________________________________" + "\n");
                }
                perEnt.getObjectInputFilter();
                break;
            case "1":

                //ahora si enviamos al server los datos que queremos, sin errores
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();

                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");
                List<Users> listaUsers = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                listaUsers = (ArrayList) perEnt.readObject();

                jTextAreaSelect.append("____________________________________________________________________"+ "\n");
                //recibo objeto

                for (int i = 0; i < listaUsers.size(); i++) {
                    jTextAreaSelect.append("Login: " + listaUsers.get(i).getLogin() + "\n"
                            + "Password: " + listaUsers.get(i).getPass() + "\n"
                            + "Tipo de user: " + listaUsers.get(i).getNumtipe() + "\n"
                            + "DNI: " + listaUsers.get(i).getDni() + "\n"
                            +"____________________________________________________________________" + "\n");
                }
                perEnt.getObjectInputFilter();
                break;

            case "2":

                //ahora si enviamos al server los datos que queremos, sin errores
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");
                List<Empresa> listaEmpresa = new ArrayList<>();
                perEnt = new ObjectInputStream(socket.getInputStream());
                listaEmpresa = (ArrayList) perEnt.readObject();
                jTextAreaSelect.append("____________________________________________________________________"+ "\n");
                //recibo objeto
                for (int i = 0; i < listaEmpresa.size(); i++) {
                    jTextAreaSelect.append("Nombre empresa: " + listaEmpresa.get(i).getNom() + "\n"
                            + "Dirección: " + listaEmpresa.get(i).getAddress() + "\n"
                            + "Telefono: " + listaEmpresa.get(i).getTelephon() + "\n"
                            +"____________________________________________________________________" + "\n");
                }
                perEnt.getObjectInputFilter();
                break;
            case "3":

                //ahora si enviamos al server los datos que queremos, sin errores
                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");
                List<Jornada> listaJorandas = new ArrayList<>();
                perEnt = new ObjectInputStream(socket.getInputStream());
                listaJorandas = (ArrayList) perEnt.readObject();

                jTextAreaSelect.append("____________________________________________________________________"+ "\n");
                //recibo objeto
                for (int i = 0; i < listaJorandas.size(); i++) {
                    jTextAreaSelect.append("Dni: " + listaJorandas.get(i).getDni() + "\n"
                            + "Nombre: " + listaJorandas.get(i).getNom() + "\n"
                            + "Apellido: " + listaJorandas.get(i).getApellido() + "\n"
                            + "Codigo tarjeta: " + listaJorandas.get(i).getCodicard() + "\n"
                            + "Hora entrada: " + listaJorandas.get(i).getHoraentrada() + "\n"
                            + "Hora salida: " + listaJorandas.get(i).getHorasalida() + "\n"
                            + "Total: " + listaJorandas.get(i).getTotal() + "\n"
                            + "Fecha: " + listaJorandas.get(i).getFecha() + "\n"
                            + "____________________________________________________________________");
                }
                perEnt.getObjectInputFilter();
                break;
            }
        }

    public void operacionesConApellidos7 ( String[] NomApellido)throws IOException, ClassNotFoundException{
            String codigoUserRecibido = NomApellido[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
            crud = NomApellido[1];
            nombreTabla = NomApellido[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            String nom = NomApellido[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoNom = NomApellido[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            String apellido = NomApellido[5]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoApellido = NomApellido[6];
            orden = NomApellido[7];// si es el caso el orden, si no hay ponemos 0

            jTextAreaSelect.append("____________________________________________________________________" + "\n"
                +"codigoUserRecibido: " + codigoUserRecibido + "\n"
                +"crud: " + crud + "\n"
                +"nombreTabla: " + nombreTabla + "\n"
                +"nom: " + nom + "\n"
                +"datoNom: " + datoNom + "\n"
                +"apellido: " + apellido + "\n"
                +"datoApellido: " + datoApellido + "\n"
                +"orden: " + orden + "\n"
                +"____________________________________________________________________" + "\n");

            palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + nom + "," + datoNom + "," + apellido + "," + datoApellido + "," + orden;

            if (codigoUserRecibido.equals("")) {
                codigoUserRecibido = "0";
            }

            if (crud.equals("0")) {
                if (nombreTabla.equals("0") && nom.equals("nom") && apellido.equals("apellido")) {
                    escriptor.write(palabra);
                    escriptor.newLine();
                    escriptor.flush();
                    jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                            + "\nenvia los datos siguiente: \n" + palabra + "\n");

                    List<Empleados> listaEmpleadosNomApellido = new ArrayList<>();

                    perEnt = new ObjectInputStream(socket.getInputStream());
                    listaEmpleadosNomApellido = (ArrayList) perEnt.readObject();

                    for (int i = 0; i < listaEmpleadosNomApellido.size(); i++) {
                        if (nom.equals("nom")
                                && datoNom.equals(listaEmpleadosNomApellido.get(i).getNom())
                                && apellido.equals("apellido")
                                && datoApellido.equals(listaEmpleadosNomApellido.get(i).getApellido())) {
                            jTextAreaSelect.append("Dni: " + listaEmpleadosNomApellido.get(i).getDni() + "\n"
                                    + "Nombre: " + listaEmpleadosNomApellido.get(i).getNom() + "\n"
                                    + "Apellido: " + listaEmpleadosNomApellido.get(i).getApellido() + "\n"
                                    + "Nombre empresa: " + listaEmpleadosNomApellido.get(i).getNomempresa() + "\n"
                                    + "Departamento: " + listaEmpleadosNomApellido.get(i).getDepartament() + "\n"
                                    + "Codigo tarjeta: " + listaEmpleadosNomApellido.get(i).getCodicard() + "\n"
                                    + "Mail: " + listaEmpleadosNomApellido.get(i).getMail() + "\n"
                                    + "Telefono: " + listaEmpleadosNomApellido.get(i).getTelephon() + "\n"
                                    +"____________________________________________________________________" + "\n");
                        }
                    }
                    perEnt.getObjectInputFilter();
                } else if (nombreTabla.equals("3") && nom.equals("nom") && apellido.equals("apellido")) {
                    escriptor.write(palabra);
                    escriptor.newLine();
                    escriptor.flush();
                    jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                            + "\nenvia los datos siguiente: \n" + palabra + "\n");

                    List<Jornada> listaJornadaNomApellido = new ArrayList<>();

                    perEnt = new ObjectInputStream(socket.getInputStream());
                    listaJornadaNomApellido = (ArrayList) perEnt.readObject();
                    for (int i = 0; i < listaJornadaNomApellido.size(); i++) {
                        if (nom.equals("nom")
                                && datoNom.equals(listaJornadaNomApellido.get(i).getNom())
                                && apellido.equals("apellido")
                                && datoApellido.equals(listaJornadaNomApellido.get(i).getApellido())) {
                            jTextAreaSelect.append("Dni: " + listaJornadaNomApellido.get(i).getDni() + "\n"
                                    + "Nombre: " + listaJornadaNomApellido.get(i).getNom() + "\n"
                                    + "Apellido: " + listaJornadaNomApellido.get(i).getApellido() + "\n"
                                    + "Codigo tarjeta: " + listaJornadaNomApellido.get(i).getCodicard() + "\n"
                                    + "Hora entrada: " + listaJornadaNomApellido.get(i).getHoraentrada() + "\n"
                                    + "Hora salida: " + listaJornadaNomApellido.get(i).getHorasalida() + "\n"
                                    + "Total: " + listaJornadaNomApellido.get(i).getTotal() + "\n"
                                    + "Fecha: " + listaJornadaNomApellido.get(i).getFecha() + "\n"
                                    +"____________________________________________________________________");
                        }
                    }
                    perEnt.getObjectInputFilter();
                }
        }
    }                                                   

    
    private void activarDesactivarBusqueda(){
        if (jComboBoxColumna.getSelectedItem()!=null){
            if (!jTextFieldPalabra.getText().equals("")&&(jComboBoxColumna.getSelectedItem().toString().equals("todas"))){
            jButtonBuscar.setEnabled(false);
            }else if (jTextFieldPalabra.getText().equals("")&&(!jComboBoxColumna.getSelectedItem().toString().equals("todas"))){
                jButtonBuscar.setEnabled(false);
            }else{
                jButtonBuscar.setEnabled(true);
            }
            /*if ((jTextFieldPalabra.getText().equals(""))&&(jComboBoxColumna.getSelectedItem().toString().equals("todas"))){
                jButtonBuscar.setEnabled(true);
            }*/       
        }
    }
    
    public void operacionesConInsertEmpresas( String []insertEmpresas)throws IOException, ClassNotFoundException{
        String codigoUserRecibido = insertEmpresas[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
        crud = insertEmpresas[1];
        nombreTabla = insertEmpresas[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
        String nom = insertEmpresas[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoNom = insertEmpresas[4];
        String address = insertEmpresas[5];
        String datoAddress = insertEmpresas[6];
        String telephon = insertEmpresas[7]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoTelephon = insertEmpresas[8];
        orden = insertEmpresas[9];// si es el caso el orden, si no hay ponemos 0

        jTextAreaInsert.append("____________________________________________________________________" + "\n"
            +"codigoUserRecibido: " + codigoUserRecibido + "\n"
            +"crud: " + crud + "\n"
            +"nombreTabla: " + nombreTabla + "\n"
            +"nom: " + nom + "\n"
            +"datoNom: " + datoNom + "\n"
            +"address: " + address + "\n"
            +"datoApellido: " + datoAddress + "\n"
            +"telephon: " + telephon + "\n"
            +"datoTelephon: " + datoTelephon + "\n"
            +"orden: " + orden + "\n"
            +"____________________________________________________________________" + "\n");

        palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + nom + "," + datoNom + "," + address
                + "," + datoAddress + "," + telephon + "," + datoTelephon + "," + orden;

        if (codigoUserRecibido.equals("")) {
            codigoUserRecibido = "0";
        }

        if (crud.equals("1")) {
            if (nombreTabla.equals("2")) {

                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empresa> insertEmpresa = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                insertEmpresa = (ArrayList) perEnt.readObject();
                jTextAreaInsert.append(("Empresa creada correctamente, sus datos son: \n"));
                jTextAreaInsert.append("Nombre: " + datoNom + "\n"
                        + "Adrress: " + datoAddress + "\n"
                        + "Telefono: " + datoTelephon + "\n"
                        +"____________________________________________________________________\n");
                perEnt.getObjectInputFilter();
            }
        }
    }
    
     public void  operacionesConInsertUsuarios( String [] insertUsuarios)throws IOException, ClassNotFoundException{
        String codigoUserRecibido = insertUsuarios[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
                crud = insertUsuarios[1];
                nombreTabla = insertUsuarios[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
                String login = insertUsuarios[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
                String datoLogin = insertUsuarios[4];
                String pass = insertUsuarios[5];
                String datoPass = insertUsuarios[6];
                String numTipe = insertUsuarios[7]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
                String datoNumTipe = insertUsuarios[8];
                String dni = insertUsuarios[9]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
                String datoDni = insertUsuarios[10];
                orden = insertUsuarios[11];// si es el caso el orden, si no hay ponemos 0

                jTextAreaInsert.append("____________________________________________________________________" + "\n"
                    +"codigoUserRecibido: " + codigoUserRecibido + "\n"
                    +"crud: " + crud + "\n"
                    +"nombreTabla: " + nombreTabla + "\n"
                    +"login: " + login + "\n"
                    +"datoLogin: " + datoLogin + "\n"
                    +"pass: " + pass + "\n"
                    +"datoPass: " + datoPass + "\n"
                    +"numTipe: " + numTipe + "\n"
                    +"datoNumTipe: " + datoNumTipe + "\n"
                    +"dni: " + dni + "\n"
                    +"datoDni: " + datoDni + "\n"
                    +"orden: " + orden + "\n"
                    +"____________________________________________________________________" + "\n");

                palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + login + "," + datoLogin + "," + pass
                        + "," + datoPass + "," + numTipe + "," + datoNumTipe + "," + dni + "," + datoDni + "," + orden;

                if (codigoUserRecibido.equals("")) {
                    codigoUserRecibido = "0";
                }

                if (crud.equals("1")) {
                    if (nombreTabla.equals("1")) {

                        escriptor.write(palabra);
                        escriptor.newLine();
                        escriptor.flush();
                        jTextAreaInsert.append("El usuario con codigo: " + codigoUserRecibido
                                + "\nenvia los datos siguiente: \n" + palabra + "\n");

                        List<Empresa> insertUser = new ArrayList<>();

                        perEnt = new ObjectInputStream(socket.getInputStream());
                        insertUser = (ArrayList) perEnt.readObject();
                        jTextAreaInsert.append(("\n____________________________________________________________________\n+"
                                + "User creado correctamente, sus datos son: \n"));
                        jTextAreaInsert.append("Login: " + datoLogin + "\n"
                                + "Pass: " + datoPass + "\n"
                                + "Num Tipe: " + datoNumTipe + "\n"
                                + "Dni: " + datoDni + "\n"
                                +"____________________________________________________________________\n");
                        perEnt.getObjectInputFilter();
                    }
                }
    }
    
   public void operacionesConInsertEmpleadoMailTelf( String [] insertEmpleadoMailTelf)throws IOException, ClassNotFoundException{
        String codigoUserRecibido = insertEmpleadoMailTelf[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
        crud = insertEmpleadoMailTelf[1];
        nombreTabla = insertEmpleadoMailTelf[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
        String dni = insertEmpleadoMailTelf[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoDni = insertEmpleadoMailTelf[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
        String nom = insertEmpleadoMailTelf[5]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoNom = insertEmpleadoMailTelf[6];
        String apellido = insertEmpleadoMailTelf[7];// si es el caso el orden, si no hay ponemos 0
        String datoApellido = insertEmpleadoMailTelf[8]; //el codigo recibido tiene que ser el mismo que le hemos asignado
        String nomempresa = insertEmpleadoMailTelf[9];
        String datoNomempresa = insertEmpleadoMailTelf[10]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
        String departament = insertEmpleadoMailTelf[11]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoDepartament = insertEmpleadoMailTelf[12];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
        String codicard = insertEmpleadoMailTelf[13]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoCodicard = insertEmpleadoMailTelf[14];
        orden = insertEmpleadoMailTelf[15];// si es el caso el orden, si no hay ponemos 0

        jTextAreaInsert.append("____________________________________________________________________"+ "\n" 
                +"codigoUserRecibido: " + codigoUserRecibido + "\n" 
                + "crud: " + crud + "\n" 
                +"nombreTabla: " + nombreTabla + "\n" 
                +"dni: " + dni + "\n" 
                + "datoDni: " + datoDni +  "\n" 
                +"nom: " + nom + "\n" 
                + "datoNom: " + datoNom + "\n" 
                + "apellido: " + apellido + "\n" 
                + "datoApellido: " + datoApellido + "\n" 
                + "nomempresa: " + nomempresa + "\n" 
                +"datoNomempresa: " + datoNomempresa + "\n" 
                + "departament: " + departament + "\n" 
                +"datoDepartament: " + datoDepartament + "\n" 
                + "codicard: " + codicard + "\n" 
                +"datoCodicar: " + datoCodicard + "\n" 
                + "orden: " + orden + "\n" 
                + "____________________________________________________________________" + "\n");

        palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + dni + "," + datoDni + "," + nom + "," + datoNom + "," + apellido
                + "," + datoApellido + "," + nomempresa + "," + datoNomempresa + "," + departament + "," + datoDepartament + "," + codicard + "," + datoCodicard
                + "," + orden;

        if (codigoUserRecibido.equals("")) {
            codigoUserRecibido = "0";
        }

        if (crud.equals("1")) {
            if (nombreTabla.equals("0")) {

                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                jTextAreaSelect.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empleados> insertEmpleadosMailTelf = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                insertEmpleadosMailTelf = (ArrayList) perEnt.readObject();
                jTextAreaInsert.append(("Empleado creado correctamente, sus datos son: \n"));
                jTextAreaInsert.append("Dni: " + datoDni + "\n"
                        + "Nombre: " + datoNom + "\n"
                        + "Apellido: " + datoApellido + "\n"
                        + "Nombre empresa: " + datoNomempresa + "\n"
                        + "Departamento: " + datoDepartament + "\n"
                        + "Codigo tarjeta: " + datoCodicard + "\n"
                        +"____________________________________________________________________\n");
                perEnt.getObjectInputFilter();
            }
        }
    }
    
    public void operacionsConInsertEmpleadoMT17y15(String []insertEmpleadoMT)throws IOException, ClassNotFoundException{
        if (insertEmpleadoMT[17].equals("0") && insertEmpleadoMT[15].equals("mail")
                    || insertEmpleadoMT[17].equals("1") && insertEmpleadoMT[15].equals("mail")) {

            String codigoUserRecibido = insertEmpleadoMT[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
            crud = insertEmpleadoMT[1];
            nombreTabla = insertEmpleadoMT[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            String dni = insertEmpleadoMT[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoDni = insertEmpleadoMT[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            String nom = insertEmpleadoMT[5]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoNom = insertEmpleadoMT[6];
            String apellido = insertEmpleadoMT[7];// si es el caso el orden, si no hay ponemos 0
            String datoApellido = insertEmpleadoMT[8]; //el codigo recibido tiene que ser el mismo que le hemos asignado
            String nomempresa = insertEmpleadoMT[9];
            String datoNomempresa = insertEmpleadoMT[10]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            String departament = insertEmpleadoMT[11]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoDepartament = insertEmpleadoMT[12];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            String codicard = insertEmpleadoMT[13]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoCodicard = insertEmpleadoMT[14];
            String mail = insertEmpleadoMT[15];// si es el caso el orden, si no hay ponemos 0
            String datoMail = insertEmpleadoMT[16];
            orden = insertEmpleadoMT[17];// si es el caso el orden, si no hay ponemos 0

            jTextAreaInsert.append("____________________________________________________________________"+ "\n" 
                +"codigoUserRecibido: " + codigoUserRecibido + "\n" 
                + "crud: " + crud + "\n" 
                +"nombreTabla: " + nombreTabla + "\n" 
                +"dni: " + dni + "\n" 
                + "datoDni: " + datoDni +  "\n" 
                +"nom: " + nom + "\n" 
                + "datoNom: " + datoNom + "\n" 
                + "apellido: " + apellido + "\n" 
                + "datoApellido: " + datoApellido + "\n" 
                + "nomempresa: " + nomempresa + "\n" 
                +"datoNomempresa: " + datoNomempresa + "\n" 
                + "departament: " + departament + "\n" 
                +"datoDepartament: " + datoDepartament + "\n" 
                + "codicard: " + codicard + "\n" 
                +"datoCodicar: " + datoCodicard + "\n" 
                + "orden: " + orden + "\n" 
                + "____________________________________________________________________" + "\n");

            palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + dni + "," + datoDni + "," + nom + "," + datoNom + "," + apellido
                    + "," + datoApellido + "," + nomempresa + "," + datoNomempresa + "," + departament + "," + datoDepartament + "," + codicard + "," + datoCodicard
                    + "," + mail + "," + datoMail + "," + orden;

            if (codigoUserRecibido.equals("")) {
                codigoUserRecibido = "0";
            }

            if (crud.equals("1")) {
                if (nombreTabla.equals("0")) {

                    escriptor.write(palabra);
                    escriptor.newLine();
                    escriptor.flush();
                     jTextAreaInsert.append("El usuario con codigo: " + codigoUserRecibido
                            + "\nenvia los datos siguiente: \n" + palabra + "\n");

                    List<Empleados> insertEmpleadosMail = new ArrayList<>();

                    perEnt = new ObjectInputStream(socket.getInputStream());
                    insertEmpleadosMail = (ArrayList) perEnt.readObject();
                     jTextAreaInsert.append(("Empleado creado correctamente, sus datos son: \n"));
                     jTextAreaInsert.append("Dni: " + datoDni + "\n"
                            + "Nombre: " + datoNom + "\n"
                            + "Apellido: " + datoApellido + "\n"
                            + "Nombre empresa: " + datoNomempresa + "\n"
                            + "Departamento: " + datoDepartament + "\n"
                            + "Codigo tarjeta: " + datoCodicard + "\n"
                            + "Mail: " + datoMail + "\n"
                            +"____________________________________________________________________\n");
                    perEnt.getObjectInputFilter();
                }
            }
        } else if (insertEmpleadoMT[17].equals("0") && insertEmpleadoMT[15].equals("telephon")
                || insertEmpleadoMT[17].equals("1") && insertEmpleadoMT[15].equals("telephon")) {

            String codigoUserRecibido = insertEmpleadoMT[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
            crud = insertEmpleadoMT[1];
            nombreTabla = insertEmpleadoMT[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            String dni = insertEmpleadoMT[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoDni = insertEmpleadoMT[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            String nom = insertEmpleadoMT[5]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoNom = insertEmpleadoMT[6];
            String apellido = insertEmpleadoMT[7];// si es el caso el orden, si no hay ponemos 0
            String datoApellido = insertEmpleadoMT[8]; //el codigo recibido tiene que ser el mismo que le hemos asignado
            String nomempresa = insertEmpleadoMT[9];
            String datoNomempresa = insertEmpleadoMT[10]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
            String departament = insertEmpleadoMT[11]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoDepartament = insertEmpleadoMT[12];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
            String codicard = insertEmpleadoMT[13]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
            String datoCodicard = insertEmpleadoMT[14];
            String telephon = insertEmpleadoMT[15];// si es el caso el orden, si no hay ponemos 0
            String datoTelephon = insertEmpleadoMT[16];
            orden = insertEmpleadoMT[17];// si es el caso el orden, si no hay ponemos 0

            jTextAreaInsert.append("____________________________________________________________________"+ "\n" 
                +"codigoUserRecibido: " + codigoUserRecibido + "\n" 
                + "crud: " + crud + "\n" 
                +"nombreTabla: " + nombreTabla + "\n" 
                +"dni: " + dni + "\n" 
                + "datoDni: " + datoDni +  "\n" 
                +"nom: " + nom + "\n" 
                + "datoNom: " + datoNom + "\n" 
                + "apellido: " + apellido + "\n" 
                + "datoApellido: " + datoApellido + "\n" 
                + "nomempresa: " + nomempresa + "\n" 
                +"datoNomempresa: " + datoNomempresa + "\n" 
                + "departament: " + departament + "\n" 
                +"datoDepartament: " + datoDepartament + "\n" 
                + "codicard: " + codicard + "\n" 
                +"datoCodicar: " + datoCodicard + "\n" 
                + "orden: " + orden + "\n" 
                + "____________________________________________________________________" + "\n");

            palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + dni + "," + datoDni + "," + nom + "," + datoNom + "," + apellido
                    + "," + datoApellido + "," + nomempresa + "," + datoNomempresa + "," + departament + "," + datoDepartament + "," + codicard + "," + datoCodicard
                    + "," + telephon + "," + datoTelephon + "," + orden;

            if (codigoUserRecibido.equals("")) {
                codigoUserRecibido = "0";
            }

            if (crud.equals("1")) {
                if (nombreTabla.equals("0")) {

                    escriptor.write(palabra);
                    escriptor.newLine();
                    escriptor.flush();
                    jTextAreaInsert.append("El usuario con codigo: " + codigoUserRecibido
                            + "\nenvia los datos siguiente: \n" + palabra + "\n");

                    List<Empleados> insertEmpleadosTelf = new ArrayList<>();

                    perEnt = new ObjectInputStream(socket.getInputStream());
                    insertEmpleadosTelf = (ArrayList) perEnt.readObject();
                    jTextAreaInsert.append(("\n____________________________________________________________________\n+"
                            + "Empleado creado correctamente, sus datos son: \n"));
                    jTextAreaInsert.append("Dni: " + datoDni + "\n"
                            + "Nombre: " + datoNom + "\n"
                            + "Apellido: " + datoApellido + "\n"
                            + "Nombre empresa: " + datoNomempresa + "\n"
                            + "Departamento: " + datoDepartament + "\n"
                            + "Codigo tarjeta: " + datoCodicard + "\n"
                            + "Telephon: " + datoTelephon + "\n"
                            +"____________________________________________________________________\n");
                    perEnt.getObjectInputFilter();
                }
            }
        }
    }
    
    public void operacionesConInsertEmpleado19(String []insertEmpleado)throws IOException, ClassNotFoundException{
        String codigoUserRecibido = insertEmpleado[0]; //el codigo recibido tiene que ser el mismo que le hemos asignado
        crud = insertEmpleado[1];
        nombreTabla = insertEmpleado[2]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
        String dni = insertEmpleado[3]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoDni = insertEmpleado[4];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
        String nom = insertEmpleado[5]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoNom = insertEmpleado[6];
        String apellido = insertEmpleado[7];// si es el caso el orden, si no hay ponemos 0
        String datoApellido = insertEmpleado[8]; //el codigo recibido tiene que ser el mismo que le hemos asignado
        String nomempresa = insertEmpleado[9];
        String datoNomempresa = insertEmpleado[10]; //Será el numero de tabla. (ej: 1->empleados 2->users 3-jornada 4-usertipe 5->empresa)
        String departament = insertEmpleado[11]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoDepartament = insertEmpleado[12];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
        String codicard = insertEmpleado[13]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoCodicard = insertEmpleado[14];
        String mail = insertEmpleado[15];// si es el caso el orden, si no hay ponemos 0
        String datoMail = insertEmpleado[16];// si es el caso será la columna (,dni,nom,etc), si no hay ponemos 0
        String telephon = insertEmpleado[17]; //sera la palabra que busquemos(ej: juan,1234567D), si ponemos 0 sera todos los de la tabla
        String datoTelephon = insertEmpleado[18];
        orden = insertEmpleado[19];// si es el caso el orden, si no hay ponemos 0

        jTextAreaInsert.append("____________________________________________________________________"+ "\n" 
                +"codigoUserRecibido: " + codigoUserRecibido + "\n" 
                + "crud: " + crud + "\n" 
                +"nombreTabla: " + nombreTabla + "\n" 
                +"dni: " + dni + "\n" 
                + "datoDni: " + datoDni +  "\n" 
                +"nom: " + nom + "\n" 
                + "datoNom: " + datoNom + "\n" 
                + "apellido: " + apellido + "\n" 
                + "datoApellido: " + datoApellido + "\n" 
                + "nomempresa: " + nomempresa + "\n" 
                +"datoNomempresa: " + datoNomempresa + "\n" 
                + "departament: " + departament + "\n" 
                +"datoDepartament: " + datoDepartament + "\n" 
                + "codicard: " + codicard + "\n" 
                +"datoCodicar: " + datoCodicard + "\n" 
                + "orden: " + orden + "\n" 
                + "____________________________________________________________________" + "\n");

        palabra = codigoUserRecibido + "," + crud + "," + nombreTabla + "," + dni + "," + datoDni + "," + nom + "," + datoNom + "," + apellido
                + "," + datoApellido + "," + nomempresa + "," + datoNomempresa + "," + departament + "," + datoDepartament + "," + codicard + "," + datoCodicard
                + "," + mail + "," + datoMail + "," + telephon + "," + datoTelephon + "," + orden;

        if (codigoUserRecibido.equals("")) {
            codigoUserRecibido = "0";
        }

        if (crud.equals("1")) {
            if (nombreTabla.equals("0")) {

                escriptor.write(palabra);
                escriptor.newLine();
                escriptor.flush();
                 jTextAreaInsert.append("El usuario con codigo: " + codigoUserRecibido
                        + "\nenvia los datos siguiente: \n" + palabra + "\n");

                List<Empleados> insertEmpleados = new ArrayList<>();

                perEnt = new ObjectInputStream(socket.getInputStream());
                insertEmpleados = (ArrayList) perEnt.readObject();
                 jTextAreaInsert.append(("\n____________________________________________________________________" 
                         + "\nEmpleado creado correctamente, sus datos son: \n"));
                 jTextAreaInsert.append("Dni: " + datoDni + "\n"
                        + "Nombre: " + datoNom + "\n"
                        + "Apellido: " + datoApellido + "\n"
                        + "Nombre empresa: " + datoNomempresa + "\n"
                        + "Departamento: " + datoDepartament + "\n"
                        + "Codigo tarjeta: " + datoCodicard + "\n"
                        + "Mail: " + datoMail + "\n"
                        + "Telefono: " + datoTelephon + "\n"
                        +"____________________________________________________________________\n");
                perEnt.getObjectInputFilter();
            }
        }
    }                

    private void jTextFieldPalabraKeyReleased(java.awt.event.KeyEvent evt) {                                              
        // TODO add your handling code here:
        activarDesactivarBusqueda();
    }                                             

    private void jComboBoxTablasActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        jComboBoxTablas.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                String seleccion = (String) jComboBoxTablas.getSelectedItem();
                // Limpia el modelo actual
                jComboBoxColumna.removeAllItems();
                if ("empleados".equals(seleccion)) {
                    jComboBoxColumna.addItem("todas");
                    jComboBoxColumna.addItem("dni");
                    jComboBoxColumna.addItem("nom");
                    jComboBoxColumna.addItem("apellido");
                    jComboBoxColumna.addItem("nomempresa");
                    jComboBoxColumna.addItem("departament");
                    jComboBoxColumna.addItem("codicard");
                    jComboBoxColumna.addItem("mail");
                    jComboBoxColumna.addItem("telephon");
                } else if ("empresa".equals(seleccion)) {
                    jComboBoxColumna.addItem("todas");
                    jComboBoxColumna.addItem("nom");
                    jComboBoxColumna.addItem("address");
                    jComboBoxColumna.addItem("telephon");
                } else if ("jornada".equals(seleccion)) {
                    jComboBoxColumna.addItem("todas");
                    jComboBoxColumna.addItem("dni");
                    jComboBoxColumna.addItem("nom");
                    jComboBoxColumna.addItem("apellido");
                    jComboBoxColumna.addItem("codicard");
                    jComboBoxColumna.addItem("horaentrada");
                    jComboBoxColumna.addItem("horasalida");
                    jComboBoxColumna.addItem("total");
                    jComboBoxColumna.addItem("fecha");
                }else if ("users".equals(seleccion)) {
                    jComboBoxColumna.addItem("todas");
                    jComboBoxColumna.addItem("login");
                    jComboBoxColumna.addItem("pass");
                    jComboBoxColumna.addItem("numtipe");
                    jComboBoxColumna.addItem("dni");
                }            
            }
        });
    }                                               

    private void jComboBoxColumnaActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
         activarDesactivarBusqueda();
    }   
    
    private void activarDesactivarTextFields(){
        if (jRadioButtonEmpresa.isSelected()){
            jTextFieldNom.setVisible(true);
            jTextFieldAddress.setVisible(true);
            jTextFieldTelephon.setVisible(true);

            jTextFieldDni.setVisible(false);
            jTextFieldApellido.setVisible(false);
            jTextFieldNomEmpresa.setVisible(false);
            jTextFieldDepartament.setVisible(false);
            jTextFieldCodicard.setVisible(false);
            jTextFieldMail.setVisible(false);
            jTextFieldLogin.setVisible(false);
            jTextFieldPass.setVisible(false);
            jTextFieldNumtipe.setVisible(false);
        }else if (jRadioButtonEmpleado.isSelected()){
            jTextFieldDni.setVisible(true);
            jTextFieldNom.setVisible(true);
            jTextFieldApellido.setVisible(true);
            jTextFieldNomEmpresa.setVisible(true);
            jTextFieldDepartament.setVisible(true);
            jTextFieldCodicard.setVisible(true);
            jTextFieldMail.setVisible(true);
            jTextFieldTelephon.setVisible(true);

            jTextFieldAddress.setVisible(false);   
            jTextFieldLogin.setVisible(false);
            jTextFieldPass.setVisible(false);
            jTextFieldNumtipe.setVisible(false);
        }else if (jRadioButtonJornada.isSelected()){
            jTextFieldDni.setVisible(true);
            
            jTextFieldCodicard.setVisible(false);
            jTextFieldNom.setVisible(false);
            jTextFieldApellido.setVisible(false);
            jTextFieldNomEmpresa.setVisible(false);
            jTextFieldDepartament.setVisible(false);    
            jTextFieldMail.setVisible(false);
            jTextFieldTelephon.setVisible(false);        
            jTextFieldAddress.setVisible(false);   
            jTextFieldLogin.setVisible(false);
            jTextFieldPass.setVisible(false);
            jTextFieldNumtipe.setVisible(false);
        }else if (jRadioButtonUsers.isSelected()){
            jTextFieldLogin.setVisible(true);
            jTextFieldPass.setVisible(true);
            jTextFieldNumtipe.setVisible(true);
            jTextFieldDni.setVisible(true);

            jTextFieldCodicard.setVisible(false);       
            jTextFieldNom.setVisible(false);
            jTextFieldApellido.setVisible(false);
            jTextFieldNomEmpresa.setVisible(false);
            jTextFieldDepartament.setVisible(false);    
            jTextFieldMail.setVisible(false);
            jTextFieldTelephon.setVisible(false);        
            jTextFieldAddress.setVisible(false);
        }else{
            jTextFieldLogin.setVisible(false);
            jTextFieldPass.setVisible(false);
            jTextFieldNumtipe.setVisible(false);
            jTextFieldDni.setVisible(false);
            jTextFieldCodicard.setVisible(false);       
            jTextFieldNom.setVisible(false);
            jTextFieldApellido.setVisible(false);
            jTextFieldNomEmpresa.setVisible(false);
            jTextFieldDepartament.setVisible(false);    
            jTextFieldMail.setVisible(false);
            jTextFieldTelephon.setVisible(false);        
            jTextFieldAddress.setVisible(false); 
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton jButtonActualizarTabla;
    private javax.swing.JButton jButtonAñadirATabla;
    private javax.swing.JButton jButtonBorrar;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCambiarContraseña;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JComboBox<String> jComboBoxColumna;
    private javax.swing.JComboBox<String> jComboBoxColumna1;
    private javax.swing.JComboBox<String> jComboBoxColumna2;
    private javax.swing.JComboBox<String> jComboBoxOrdenar;
    private javax.swing.JComboBox<String> jComboBoxTablas;
    private javax.swing.JComboBox<String> jComboBoxTablas1;
    private javax.swing.JComboBox<String> jComboBoxTablas2;
    private javax.swing.JComboBox<String> jComboBoxTipoOperacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAutores;
    private javax.swing.JLabel jLabelCamposAIntroducir;
    private javax.swing.JLabel jLabelCodigo;
    private javax.swing.JLabel jLabelCodigo1;
    private javax.swing.JLabel jLabelCodigo2;
    private javax.swing.JLabel jLabelCodigo3;
    private javax.swing.JLabel jLabelColumna;
    private javax.swing.JLabel jLabelColumna1;
    private javax.swing.JLabel jLabelColumna2;
    private javax.swing.JLabel jLabelDescripcion;
    private javax.swing.JLabel jLabelHREntrada;
    private javax.swing.JLabel jLabelOperacion;
    private javax.swing.JLabel jLabelOrdenar;
    private javax.swing.JLabel jLabelPalabra;
    private javax.swing.JLabel jLabelPalabra1;
    private javax.swing.JLabel jLabelPalabra2;
    private javax.swing.JLabel jLabelTabla;
    private javax.swing.JLabel jLabelTabla1;
    private javax.swing.JLabel jLabelTabla2;
    private javax.swing.JLabel jLabelUserCode;
    private javax.swing.JLabel jLabelUserCode1;
    private javax.swing.JLabel jLabelUserCode2;
    private javax.swing.JLabel jLabelUserCode3;
    private javax.swing.JLabel jLabel_Imagen;
    private javax.swing.JLabel jLabel_ImagenOtros;
    private javax.swing.JPanel jPanelAcercaDe;
    private javax.swing.JPanel jPanelActualizar;
    private javax.swing.JPanel jPanelAñadir;
    private javax.swing.JPanel jPanelBorrar;
    private javax.swing.JPanel jPanelBusqueda;
    private javax.swing.JPanel jPanelBusqueda1;
    private javax.swing.JPanel jPanelBusqueda2;
    private javax.swing.JPanel jPanelBusqueda3;
    private javax.swing.JPanel jPanelGestionUsuario;
    private javax.swing.JPanel jPanelOtros;
    private javax.swing.JRadioButton jRadioButtonEmpleado;
    private javax.swing.JRadioButton jRadioButtonEmpresa;
    private javax.swing.JRadioButton jRadioButtonJornada;
    private javax.swing.JRadioButton jRadioButtonUsers;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaDelete;
    private javax.swing.JTextArea jTextAreaInsert;
    private javax.swing.JTextArea jTextAreaSelect;
    private javax.swing.JTextArea jTextAreaUpdate;
    private javax.swing.JTextField jTextFieldAddress;
    private javax.swing.JTextField jTextFieldApellido;
    private javax.swing.JTextField jTextFieldCodicard;
    private javax.swing.JTextField jTextFieldDepartament;
    private javax.swing.JTextField jTextFieldDni;
    private javax.swing.JTextField jTextFieldLogin;
    private javax.swing.JTextField jTextFieldMail;
    private javax.swing.JTextField jTextFieldNom;
    private javax.swing.JTextField jTextFieldNomEmpresa;
    private javax.swing.JTextField jTextFieldNumtipe;
    private javax.swing.JTextField jTextFieldPalabra;
    private javax.swing.JTextField jTextFieldPalabra1;
    private javax.swing.JTextField jTextFieldPalabra2;
    private javax.swing.JTextField jTextFieldPass;
    private javax.swing.JTextField jTextFieldTelephon;
    // End of variables declaration//GEN-END:variables
}
